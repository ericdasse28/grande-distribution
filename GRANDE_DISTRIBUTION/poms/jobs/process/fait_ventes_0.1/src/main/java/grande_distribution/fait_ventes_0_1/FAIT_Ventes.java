// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package grande_distribution.fait_ventes_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: FAIT_Ventes Purpose: Table de faits<br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status 
 */
public class FAIT_Ventes implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "FAIT_Ventes";
	private final String projectName = "GRANDE_DISTRIBUTION";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				FAIT_Ventes.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(FAIT_Ventes.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileList_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputPositional_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_magasins_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_article_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_temps_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileList_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileList_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
		String properties_tDBConnection_1 = "noDatetimeStringSync=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
		if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
			properties_tDBConnection_1 += "rewriteBatchedStatements=true";
		}else if (properties_tDBConnection_1 != null && !properties_tDBConnection_1.contains("rewriteBatchedStatements")) {
			properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
		}
		
		String url_tDBConnection_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "grande_distribution_db" + "?" + properties_tDBConnection_1;
		String dbUser_tDBConnection_1 = "root";
		
		
			 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");
			String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
		
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "com.mysql.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
		
				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("conn_tDBConnection_1",conn_tDBConnection_1);

	globalMap.put("db_tDBConnection_1","grande_distribution_db");
 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
    static byte[] commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_vente;

				public String getId_vente () {
					return this.id_vente;
				}
				
			    public String num_ticket;

				public String getNum_ticket () {
					return this.num_ticket;
				}
				
			    public String id_date_vente;

				public String getId_date_vente () {
					return this.id_date_vente;
				}
				
			    public String ref_produit;

				public String getRef_produit () {
					return this.ref_produit;
				}
				
			    public String code_magasin;

				public String getCode_magasin () {
					return this.code_magasin;
				}
				
			    public String heure_vente;

				public String getHeure_vente () {
					return this.heure_vente;
				}
				
			    public String department_code;

				public String getDepartment_code () {
					return this.department_code;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String code_tva;

				public String getCode_tva () {
					return this.code_tva;
				}
				
			    public Float prix_achat;

				public Float getPrix_achat () {
					return this.prix_achat;
				}
				
			    public Float quantite;

				public Float getQuantite () {
					return this.quantite;
				}
				
			    public Float prix_vente;

				public Float getPrix_vente () {
					return this.prix_vente;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_vente == null) ? 0 : this.id_vente.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.id_vente == null) {
							if (other.id_vente != null)
								return false;
						
						} else if (!this.id_vente.equals(other.id_vente))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.id_vente = this.id_vente;
	            other.num_ticket = this.num_ticket;
	            other.id_date_vente = this.id_date_vente;
	            other.ref_produit = this.ref_produit;
	            other.code_magasin = this.code_magasin;
	            other.heure_vente = this.heure_vente;
	            other.department_code = this.department_code;
	            other.description = this.description;
	            other.code_tva = this.code_tva;
	            other.prix_achat = this.prix_achat;
	            other.quantite = this.quantite;
	            other.prix_vente = this.prix_vente;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.id_vente = this.id_vente;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length) {
				if(length < 1024 && commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length == 0) {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[1024];
				} else {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length);
			strReturn = new String(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes) {

        	try {

        		int length = 0;
		
					this.id_vente = readString(dis);
					
					this.num_ticket = readString(dis);
					
					this.id_date_vente = readString(dis);
					
					this.ref_produit = readString(dis);
					
					this.code_magasin = readString(dis);
					
					this.heure_vente = readString(dis);
					
					this.department_code = readString(dis);
					
					this.description = readString(dis);
					
					this.code_tva = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_achat = null;
           				} else {
           			    	this.prix_achat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quantite = null;
           				} else {
           			    	this.quantite = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_vente = null;
           				} else {
           			    	this.prix_vente = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_vente,dos);
					
					// String
				
						writeString(this.num_ticket,dos);
					
					// String
				
						writeString(this.id_date_vente,dos);
					
					// String
				
						writeString(this.ref_produit,dos);
					
					// String
				
						writeString(this.code_magasin,dos);
					
					// String
				
						writeString(this.heure_vente,dos);
					
					// String
				
						writeString(this.department_code,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.code_tva,dos);
					
					// Float
				
						if(this.prix_achat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_achat);
		            	}
					
					// Float
				
						if(this.quantite == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.quantite);
		            	}
					
					// Float
				
						if(this.prix_vente == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_vente);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_vente="+id_vente);
		sb.append(",num_ticket="+num_ticket);
		sb.append(",id_date_vente="+id_date_vente);
		sb.append(",ref_produit="+ref_produit);
		sb.append(",code_magasin="+code_magasin);
		sb.append(",heure_vente="+heure_vente);
		sb.append(",department_code="+department_code);
		sb.append(",description="+description);
		sb.append(",code_tva="+code_tva);
		sb.append(",prix_achat="+String.valueOf(prix_achat));
		sb.append(",quantite="+String.valueOf(quantite));
		sb.append(",prix_vente="+String.valueOf(prix_vente));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_vente, other.id_vente);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class fait_ventesStruct implements routines.system.IPersistableRow<fait_ventesStruct> {
    final static byte[] commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
    static byte[] commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String id_vente;

				public String getId_vente () {
					return this.id_vente;
				}
				
			    public String num_ticket;

				public String getNum_ticket () {
					return this.num_ticket;
				}
				
			    public String id_date_vente;

				public String getId_date_vente () {
					return this.id_date_vente;
				}
				
			    public String ref_produit;

				public String getRef_produit () {
					return this.ref_produit;
				}
				
			    public String code_magasin;

				public String getCode_magasin () {
					return this.code_magasin;
				}
				
			    public String heure_vente;

				public String getHeure_vente () {
					return this.heure_vente;
				}
				
			    public String department_code;

				public String getDepartment_code () {
					return this.department_code;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public String code_tva;

				public String getCode_tva () {
					return this.code_tva;
				}
				
			    public Float prix_achat;

				public Float getPrix_achat () {
					return this.prix_achat;
				}
				
			    public Float quantite;

				public Float getQuantite () {
					return this.quantite;
				}
				
			    public Float prix_vente;

				public Float getPrix_vente () {
					return this.prix_vente;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_vente == null) ? 0 : this.id_vente.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final fait_ventesStruct other = (fait_ventesStruct) obj;
		
						if (this.id_vente == null) {
							if (other.id_vente != null)
								return false;
						
						} else if (!this.id_vente.equals(other.id_vente))
						
							return false;
					

		return true;
    }

	public void copyDataTo(fait_ventesStruct other) {

		other.id_vente = this.id_vente;
	            other.num_ticket = this.num_ticket;
	            other.id_date_vente = this.id_date_vente;
	            other.ref_produit = this.ref_produit;
	            other.code_magasin = this.code_magasin;
	            other.heure_vente = this.heure_vente;
	            other.department_code = this.department_code;
	            other.description = this.description;
	            other.code_tva = this.code_tva;
	            other.prix_achat = this.prix_achat;
	            other.quantite = this.quantite;
	            other.prix_vente = this.prix_vente;
	            
	}

	public void copyKeysDataTo(fait_ventesStruct other) {

		other.id_vente = this.id_vente;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length) {
				if(length < 1024 && commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length == 0) {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[1024];
				} else {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length);
			strReturn = new String(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes) {

        	try {

        		int length = 0;
		
					this.id_vente = readString(dis);
					
					this.num_ticket = readString(dis);
					
					this.id_date_vente = readString(dis);
					
					this.ref_produit = readString(dis);
					
					this.code_magasin = readString(dis);
					
					this.heure_vente = readString(dis);
					
					this.department_code = readString(dis);
					
					this.description = readString(dis);
					
					this.code_tva = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_achat = null;
           				} else {
           			    	this.prix_achat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quantite = null;
           				} else {
           			    	this.quantite = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_vente = null;
           				} else {
           			    	this.prix_vente = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_vente,dos);
					
					// String
				
						writeString(this.num_ticket,dos);
					
					// String
				
						writeString(this.id_date_vente,dos);
					
					// String
				
						writeString(this.ref_produit,dos);
					
					// String
				
						writeString(this.code_magasin,dos);
					
					// String
				
						writeString(this.heure_vente,dos);
					
					// String
				
						writeString(this.department_code,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// String
				
						writeString(this.code_tva,dos);
					
					// Float
				
						if(this.prix_achat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_achat);
		            	}
					
					// Float
				
						if(this.quantite == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.quantite);
		            	}
					
					// Float
				
						if(this.prix_vente == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_vente);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id_vente="+id_vente);
		sb.append(",num_ticket="+num_ticket);
		sb.append(",id_date_vente="+id_date_vente);
		sb.append(",ref_produit="+ref_produit);
		sb.append(",code_magasin="+code_magasin);
		sb.append(",heure_vente="+heure_vente);
		sb.append(",department_code="+department_code);
		sb.append(",description="+description);
		sb.append(",code_tva="+code_tva);
		sb.append(",prix_achat="+String.valueOf(prix_achat));
		sb.append(",quantite="+String.valueOf(quantite));
		sb.append(",prix_vente="+String.valueOf(prix_vente));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(fait_ventesStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_vente, other.id_vente);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cle_art_verifieStruct implements routines.system.IPersistableRow<cle_art_verifieStruct> {
    final static byte[] commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
    static byte[] commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];

	
			    public String num_ticket;

				public String getNum_ticket () {
					return this.num_ticket;
				}
				
			    public String id_date_recu;

				public String getId_date_recu () {
					return this.id_date_recu;
				}
				
			    public String heure_vente;

				public String getHeure_vente () {
					return this.heure_vente;
				}
				
			    public String code_client;

				public String getCode_client () {
					return this.code_client;
				}
				
			    public String code_departement;

				public String getCode_departement () {
					return this.code_departement;
				}
				
			    public String PLU_Fonction;

				public String getPLU_Fonction () {
					return this.PLU_Fonction;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Float quantite;

				public Float getQuantite () {
					return this.quantite;
				}
				
			    public Float prix_vente;

				public Float getPrix_vente () {
					return this.prix_vente;
				}
				
			    public String pos_id;

				public String getPos_id () {
					return this.pos_id;
				}
				
			    public String code_caissier;

				public String getCode_caissier () {
					return this.code_caissier;
				}
				
			    public String nom_caissier;

				public String getNom_caissier () {
					return this.nom_caissier;
				}
				
			    public String code_parution;

				public String getCode_parution () {
					return this.code_parution;
				}
				
			    public String code_tva;

				public String getCode_tva () {
					return this.code_tva;
				}
				
			    public String num_commande_recu;

				public String getNum_commande_recu () {
					return this.num_commande_recu;
				}
				
			    public String code_magasin;

				public String getCode_magasin () {
					return this.code_magasin;
				}
				
			    public String code_interne;

				public String getCode_interne () {
					return this.code_interne;
				}
				
			    public String carte_fidelite;

				public String getCarte_fidelite () {
					return this.carte_fidelite;
				}
				
			    public Float pourcentage_reduction;

				public Float getPourcentage_reduction () {
					return this.pourcentage_reduction;
				}
				
			    public Character sep19;

				public Character getSep19 () {
					return this.sep19;
				}
				
			    public Float montant_reduction;

				public Float getMontant_reduction () {
					return this.montant_reduction;
				}
				
			    public String function_code;

				public String getFunction_code () {
					return this.function_code;
				}
				
			    public String num_ticket_restaurant;

				public String getNum_ticket_restaurant () {
					return this.num_ticket_restaurant;
				}
				
			    public String niveau_prix;

				public String getNiveau_prix () {
					return this.niveau_prix;
				}
				
			    public Float poids_vendu;

				public Float getPoids_vendu () {
					return this.poids_vendu;
				}
				
			    public Float prix_achat;

				public Float getPrix_achat () {
					return this.prix_achat;
				}
				
			    public String gencod;

				public String getGencod () {
					return this.gencod;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length) {
				if(length < 1024 && commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length == 0) {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[1024];
				} else {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length);
			strReturn = new String(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes) {

        	try {

        		int length = 0;
		
					this.num_ticket = readString(dis);
					
					this.id_date_recu = readString(dis);
					
					this.heure_vente = readString(dis);
					
					this.code_client = readString(dis);
					
					this.code_departement = readString(dis);
					
					this.PLU_Fonction = readString(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quantite = null;
           				} else {
           			    	this.quantite = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_vente = null;
           				} else {
           			    	this.prix_vente = dis.readFloat();
           				}
					
					this.pos_id = readString(dis);
					
					this.code_caissier = readString(dis);
					
					this.nom_caissier = readString(dis);
					
					this.code_parution = readString(dis);
					
					this.code_tva = readString(dis);
					
					this.num_commande_recu = readString(dis);
					
					this.code_magasin = readString(dis);
					
					this.code_interne = readString(dis);
					
					this.carte_fidelite = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pourcentage_reduction = null;
           				} else {
           			    	this.pourcentage_reduction = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep19 = null;
           				} else {
           			    	this.sep19 = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.montant_reduction = null;
           				} else {
           			    	this.montant_reduction = dis.readFloat();
           				}
					
					this.function_code = readString(dis);
					
					this.num_ticket_restaurant = readString(dis);
					
					this.niveau_prix = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.poids_vendu = null;
           				} else {
           			    	this.poids_vendu = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_achat = null;
           				} else {
           			    	this.prix_achat = dis.readFloat();
           				}
					
					this.gencod = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.num_ticket,dos);
					
					// String
				
						writeString(this.id_date_recu,dos);
					
					// String
				
						writeString(this.heure_vente,dos);
					
					// String
				
						writeString(this.code_client,dos);
					
					// String
				
						writeString(this.code_departement,dos);
					
					// String
				
						writeString(this.PLU_Fonction,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Float
				
						if(this.quantite == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.quantite);
		            	}
					
					// Float
				
						if(this.prix_vente == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_vente);
		            	}
					
					// String
				
						writeString(this.pos_id,dos);
					
					// String
				
						writeString(this.code_caissier,dos);
					
					// String
				
						writeString(this.nom_caissier,dos);
					
					// String
				
						writeString(this.code_parution,dos);
					
					// String
				
						writeString(this.code_tva,dos);
					
					// String
				
						writeString(this.num_commande_recu,dos);
					
					// String
				
						writeString(this.code_magasin,dos);
					
					// String
				
						writeString(this.code_interne,dos);
					
					// String
				
						writeString(this.carte_fidelite,dos);
					
					// Float
				
						if(this.pourcentage_reduction == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.pourcentage_reduction);
		            	}
					
					// Character
				
						if(this.sep19 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep19);
		            	}
					
					// Float
				
						if(this.montant_reduction == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.montant_reduction);
		            	}
					
					// String
				
						writeString(this.function_code,dos);
					
					// String
				
						writeString(this.num_ticket_restaurant,dos);
					
					// String
				
						writeString(this.niveau_prix,dos);
					
					// Float
				
						if(this.poids_vendu == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.poids_vendu);
		            	}
					
					// Float
				
						if(this.prix_achat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_achat);
		            	}
					
					// String
				
						writeString(this.gencod,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("num_ticket="+num_ticket);
		sb.append(",id_date_recu="+id_date_recu);
		sb.append(",heure_vente="+heure_vente);
		sb.append(",code_client="+code_client);
		sb.append(",code_departement="+code_departement);
		sb.append(",PLU_Fonction="+PLU_Fonction);
		sb.append(",description="+description);
		sb.append(",quantite="+String.valueOf(quantite));
		sb.append(",prix_vente="+String.valueOf(prix_vente));
		sb.append(",pos_id="+pos_id);
		sb.append(",code_caissier="+code_caissier);
		sb.append(",nom_caissier="+nom_caissier);
		sb.append(",code_parution="+code_parution);
		sb.append(",code_tva="+code_tva);
		sb.append(",num_commande_recu="+num_commande_recu);
		sb.append(",code_magasin="+code_magasin);
		sb.append(",code_interne="+code_interne);
		sb.append(",carte_fidelite="+carte_fidelite);
		sb.append(",pourcentage_reduction="+String.valueOf(pourcentage_reduction));
		sb.append(",sep19="+String.valueOf(sep19));
		sb.append(",montant_reduction="+String.valueOf(montant_reduction));
		sb.append(",function_code="+function_code);
		sb.append(",num_ticket_restaurant="+num_ticket_restaurant);
		sb.append(",niveau_prix="+niveau_prix);
		sb.append(",poids_vendu="+String.valueOf(poids_vendu));
		sb.append(",prix_achat="+String.valueOf(prix_achat));
		sb.append(",gencod="+gencod);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cle_art_verifieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class cle_mag_verifieStruct implements routines.system.IPersistableRow<cle_mag_verifieStruct> {
    final static byte[] commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
    static byte[] commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];

	
			    public String num_ticket;

				public String getNum_ticket () {
					return this.num_ticket;
				}
				
			    public String id_date_recu;

				public String getId_date_recu () {
					return this.id_date_recu;
				}
				
			    public String heure_vente;

				public String getHeure_vente () {
					return this.heure_vente;
				}
				
			    public String code_client;

				public String getCode_client () {
					return this.code_client;
				}
				
			    public String code_departement;

				public String getCode_departement () {
					return this.code_departement;
				}
				
			    public String PLU_Fonction;

				public String getPLU_Fonction () {
					return this.PLU_Fonction;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Float quantite;

				public Float getQuantite () {
					return this.quantite;
				}
				
			    public Float prix_vente;

				public Float getPrix_vente () {
					return this.prix_vente;
				}
				
			    public String pos_id;

				public String getPos_id () {
					return this.pos_id;
				}
				
			    public String code_caissier;

				public String getCode_caissier () {
					return this.code_caissier;
				}
				
			    public String nom_caissier;

				public String getNom_caissier () {
					return this.nom_caissier;
				}
				
			    public String code_parution;

				public String getCode_parution () {
					return this.code_parution;
				}
				
			    public String code_tva;

				public String getCode_tva () {
					return this.code_tva;
				}
				
			    public String num_commande_recu;

				public String getNum_commande_recu () {
					return this.num_commande_recu;
				}
				
			    public String code_magasin;

				public String getCode_magasin () {
					return this.code_magasin;
				}
				
			    public String code_interne;

				public String getCode_interne () {
					return this.code_interne;
				}
				
			    public String carte_fidelite;

				public String getCarte_fidelite () {
					return this.carte_fidelite;
				}
				
			    public Float pourcentage_reduction;

				public Float getPourcentage_reduction () {
					return this.pourcentage_reduction;
				}
				
			    public Character sep19;

				public Character getSep19 () {
					return this.sep19;
				}
				
			    public Float montant_reduction;

				public Float getMontant_reduction () {
					return this.montant_reduction;
				}
				
			    public String function_code;

				public String getFunction_code () {
					return this.function_code;
				}
				
			    public String num_ticket_restaurant;

				public String getNum_ticket_restaurant () {
					return this.num_ticket_restaurant;
				}
				
			    public String niveau_prix;

				public String getNiveau_prix () {
					return this.niveau_prix;
				}
				
			    public Float poids_vendu;

				public Float getPoids_vendu () {
					return this.poids_vendu;
				}
				
			    public Float prix_achat;

				public Float getPrix_achat () {
					return this.prix_achat;
				}
				
			    public String gencod;

				public String getGencod () {
					return this.gencod;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length) {
				if(length < 1024 && commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length == 0) {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[1024];
				} else {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length);
			strReturn = new String(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes) {

        	try {

        		int length = 0;
		
					this.num_ticket = readString(dis);
					
					this.id_date_recu = readString(dis);
					
					this.heure_vente = readString(dis);
					
					this.code_client = readString(dis);
					
					this.code_departement = readString(dis);
					
					this.PLU_Fonction = readString(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quantite = null;
           				} else {
           			    	this.quantite = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_vente = null;
           				} else {
           			    	this.prix_vente = dis.readFloat();
           				}
					
					this.pos_id = readString(dis);
					
					this.code_caissier = readString(dis);
					
					this.nom_caissier = readString(dis);
					
					this.code_parution = readString(dis);
					
					this.code_tva = readString(dis);
					
					this.num_commande_recu = readString(dis);
					
					this.code_magasin = readString(dis);
					
					this.code_interne = readString(dis);
					
					this.carte_fidelite = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pourcentage_reduction = null;
           				} else {
           			    	this.pourcentage_reduction = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep19 = null;
           				} else {
           			    	this.sep19 = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.montant_reduction = null;
           				} else {
           			    	this.montant_reduction = dis.readFloat();
           				}
					
					this.function_code = readString(dis);
					
					this.num_ticket_restaurant = readString(dis);
					
					this.niveau_prix = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.poids_vendu = null;
           				} else {
           			    	this.poids_vendu = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_achat = null;
           				} else {
           			    	this.prix_achat = dis.readFloat();
           				}
					
					this.gencod = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.num_ticket,dos);
					
					// String
				
						writeString(this.id_date_recu,dos);
					
					// String
				
						writeString(this.heure_vente,dos);
					
					// String
				
						writeString(this.code_client,dos);
					
					// String
				
						writeString(this.code_departement,dos);
					
					// String
				
						writeString(this.PLU_Fonction,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Float
				
						if(this.quantite == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.quantite);
		            	}
					
					// Float
				
						if(this.prix_vente == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_vente);
		            	}
					
					// String
				
						writeString(this.pos_id,dos);
					
					// String
				
						writeString(this.code_caissier,dos);
					
					// String
				
						writeString(this.nom_caissier,dos);
					
					// String
				
						writeString(this.code_parution,dos);
					
					// String
				
						writeString(this.code_tva,dos);
					
					// String
				
						writeString(this.num_commande_recu,dos);
					
					// String
				
						writeString(this.code_magasin,dos);
					
					// String
				
						writeString(this.code_interne,dos);
					
					// String
				
						writeString(this.carte_fidelite,dos);
					
					// Float
				
						if(this.pourcentage_reduction == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.pourcentage_reduction);
		            	}
					
					// Character
				
						if(this.sep19 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep19);
		            	}
					
					// Float
				
						if(this.montant_reduction == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.montant_reduction);
		            	}
					
					// String
				
						writeString(this.function_code,dos);
					
					// String
				
						writeString(this.num_ticket_restaurant,dos);
					
					// String
				
						writeString(this.niveau_prix,dos);
					
					// Float
				
						if(this.poids_vendu == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.poids_vendu);
		            	}
					
					// Float
				
						if(this.prix_achat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_achat);
		            	}
					
					// String
				
						writeString(this.gencod,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("num_ticket="+num_ticket);
		sb.append(",id_date_recu="+id_date_recu);
		sb.append(",heure_vente="+heure_vente);
		sb.append(",code_client="+code_client);
		sb.append(",code_departement="+code_departement);
		sb.append(",PLU_Fonction="+PLU_Fonction);
		sb.append(",description="+description);
		sb.append(",quantite="+String.valueOf(quantite));
		sb.append(",prix_vente="+String.valueOf(prix_vente));
		sb.append(",pos_id="+pos_id);
		sb.append(",code_caissier="+code_caissier);
		sb.append(",nom_caissier="+nom_caissier);
		sb.append(",code_parution="+code_parution);
		sb.append(",code_tva="+code_tva);
		sb.append(",num_commande_recu="+num_commande_recu);
		sb.append(",code_magasin="+code_magasin);
		sb.append(",code_interne="+code_interne);
		sb.append(",carte_fidelite="+carte_fidelite);
		sb.append(",pourcentage_reduction="+String.valueOf(pourcentage_reduction));
		sb.append(",sep19="+String.valueOf(sep19));
		sb.append(",montant_reduction="+String.valueOf(montant_reduction));
		sb.append(",function_code="+function_code);
		sb.append(",num_ticket_restaurant="+num_ticket_restaurant);
		sb.append(",niveau_prix="+niveau_prix);
		sb.append(",poids_vendu="+String.valueOf(poids_vendu));
		sb.append(",prix_achat="+String.valueOf(prix_achat));
		sb.append(",gencod="+gencod);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(cle_mag_verifieStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class def_cod_magStruct implements routines.system.IPersistableRow<def_cod_magStruct> {
    final static byte[] commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
    static byte[] commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];

	
			    public String num_ticket;

				public String getNum_ticket () {
					return this.num_ticket;
				}
				
			    public String id_date_recu;

				public String getId_date_recu () {
					return this.id_date_recu;
				}
				
			    public String heure_vente;

				public String getHeure_vente () {
					return this.heure_vente;
				}
				
			    public String code_client;

				public String getCode_client () {
					return this.code_client;
				}
				
			    public String code_departement;

				public String getCode_departement () {
					return this.code_departement;
				}
				
			    public String PLU_Fonction;

				public String getPLU_Fonction () {
					return this.PLU_Fonction;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Float quantite;

				public Float getQuantite () {
					return this.quantite;
				}
				
			    public Float prix_vente;

				public Float getPrix_vente () {
					return this.prix_vente;
				}
				
			    public String pos_id;

				public String getPos_id () {
					return this.pos_id;
				}
				
			    public String code_caissier;

				public String getCode_caissier () {
					return this.code_caissier;
				}
				
			    public String nom_caissier;

				public String getNom_caissier () {
					return this.nom_caissier;
				}
				
			    public String code_parution;

				public String getCode_parution () {
					return this.code_parution;
				}
				
			    public String code_tva;

				public String getCode_tva () {
					return this.code_tva;
				}
				
			    public String num_commande_recu;

				public String getNum_commande_recu () {
					return this.num_commande_recu;
				}
				
			    public String code_magasin;

				public String getCode_magasin () {
					return this.code_magasin;
				}
				
			    public String code_interne;

				public String getCode_interne () {
					return this.code_interne;
				}
				
			    public String carte_fidelite;

				public String getCarte_fidelite () {
					return this.carte_fidelite;
				}
				
			    public Float pourcentage_reduction;

				public Float getPourcentage_reduction () {
					return this.pourcentage_reduction;
				}
				
			    public Float montant_reduction;

				public Float getMontant_reduction () {
					return this.montant_reduction;
				}
				
			    public String function_code;

				public String getFunction_code () {
					return this.function_code;
				}
				
			    public String num_ticket_restaurant;

				public String getNum_ticket_restaurant () {
					return this.num_ticket_restaurant;
				}
				
			    public String niveau_prix;

				public String getNiveau_prix () {
					return this.niveau_prix;
				}
				
			    public Float poids_vendu;

				public Float getPoids_vendu () {
					return this.poids_vendu;
				}
				
			    public Float prix_achat;

				public Float getPrix_achat () {
					return this.prix_achat;
				}
				
			    public String gencod;

				public String getGencod () {
					return this.gencod;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length) {
				if(length < 1024 && commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length == 0) {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[1024];
				} else {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length);
			strReturn = new String(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes) {

        	try {

        		int length = 0;
		
					this.num_ticket = readString(dis);
					
					this.id_date_recu = readString(dis);
					
					this.heure_vente = readString(dis);
					
					this.code_client = readString(dis);
					
					this.code_departement = readString(dis);
					
					this.PLU_Fonction = readString(dis);
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quantite = null;
           				} else {
           			    	this.quantite = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_vente = null;
           				} else {
           			    	this.prix_vente = dis.readFloat();
           				}
					
					this.pos_id = readString(dis);
					
					this.code_caissier = readString(dis);
					
					this.nom_caissier = readString(dis);
					
					this.code_parution = readString(dis);
					
					this.code_tva = readString(dis);
					
					this.num_commande_recu = readString(dis);
					
					this.code_magasin = readString(dis);
					
					this.code_interne = readString(dis);
					
					this.carte_fidelite = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pourcentage_reduction = null;
           				} else {
           			    	this.pourcentage_reduction = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.montant_reduction = null;
           				} else {
           			    	this.montant_reduction = dis.readFloat();
           				}
					
					this.function_code = readString(dis);
					
					this.num_ticket_restaurant = readString(dis);
					
					this.niveau_prix = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.poids_vendu = null;
           				} else {
           			    	this.poids_vendu = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_achat = null;
           				} else {
           			    	this.prix_achat = dis.readFloat();
           				}
					
					this.gencod = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.num_ticket,dos);
					
					// String
				
						writeString(this.id_date_recu,dos);
					
					// String
				
						writeString(this.heure_vente,dos);
					
					// String
				
						writeString(this.code_client,dos);
					
					// String
				
						writeString(this.code_departement,dos);
					
					// String
				
						writeString(this.PLU_Fonction,dos);
					
					// String
				
						writeString(this.description,dos);
					
					// Float
				
						if(this.quantite == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.quantite);
		            	}
					
					// Float
				
						if(this.prix_vente == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_vente);
		            	}
					
					// String
				
						writeString(this.pos_id,dos);
					
					// String
				
						writeString(this.code_caissier,dos);
					
					// String
				
						writeString(this.nom_caissier,dos);
					
					// String
				
						writeString(this.code_parution,dos);
					
					// String
				
						writeString(this.code_tva,dos);
					
					// String
				
						writeString(this.num_commande_recu,dos);
					
					// String
				
						writeString(this.code_magasin,dos);
					
					// String
				
						writeString(this.code_interne,dos);
					
					// String
				
						writeString(this.carte_fidelite,dos);
					
					// Float
				
						if(this.pourcentage_reduction == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.pourcentage_reduction);
		            	}
					
					// Float
				
						if(this.montant_reduction == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.montant_reduction);
		            	}
					
					// String
				
						writeString(this.function_code,dos);
					
					// String
				
						writeString(this.num_ticket_restaurant,dos);
					
					// String
				
						writeString(this.niveau_prix,dos);
					
					// Float
				
						if(this.poids_vendu == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.poids_vendu);
		            	}
					
					// Float
				
						if(this.prix_achat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_achat);
		            	}
					
					// String
				
						writeString(this.gencod,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("num_ticket="+num_ticket);
		sb.append(",id_date_recu="+id_date_recu);
		sb.append(",heure_vente="+heure_vente);
		sb.append(",code_client="+code_client);
		sb.append(",code_departement="+code_departement);
		sb.append(",PLU_Fonction="+PLU_Fonction);
		sb.append(",description="+description);
		sb.append(",quantite="+String.valueOf(quantite));
		sb.append(",prix_vente="+String.valueOf(prix_vente));
		sb.append(",pos_id="+pos_id);
		sb.append(",code_caissier="+code_caissier);
		sb.append(",nom_caissier="+nom_caissier);
		sb.append(",code_parution="+code_parution);
		sb.append(",code_tva="+code_tva);
		sb.append(",num_commande_recu="+num_commande_recu);
		sb.append(",code_magasin="+code_magasin);
		sb.append(",code_interne="+code_interne);
		sb.append(",carte_fidelite="+carte_fidelite);
		sb.append(",pourcentage_reduction="+String.valueOf(pourcentage_reduction));
		sb.append(",montant_reduction="+String.valueOf(montant_reduction));
		sb.append(",function_code="+function_code);
		sb.append(",num_ticket_restaurant="+num_ticket_restaurant);
		sb.append(",niveau_prix="+niveau_prix);
		sb.append(",poids_vendu="+String.valueOf(poids_vendu));
		sb.append(",prix_achat="+String.valueOf(prix_achat));
		sb.append(",gencod="+gencod);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(def_cod_magStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
    static byte[] commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];

	
			    public String num_ticket;

				public String getNum_ticket () {
					return this.num_ticket;
				}
				
			    public Character sep1;

				public Character getSep1 () {
					return this.sep1;
				}
				
			    public String id_date_recu;

				public String getId_date_recu () {
					return this.id_date_recu;
				}
				
			    public Character sep2;

				public Character getSep2 () {
					return this.sep2;
				}
				
			    public String heure_vente;

				public String getHeure_vente () {
					return this.heure_vente;
				}
				
			    public Character sep3;

				public Character getSep3 () {
					return this.sep3;
				}
				
			    public String code_client;

				public String getCode_client () {
					return this.code_client;
				}
				
			    public Character sep4;

				public Character getSep4 () {
					return this.sep4;
				}
				
			    public String code_departement;

				public String getCode_departement () {
					return this.code_departement;
				}
				
			    public Character sep5;

				public Character getSep5 () {
					return this.sep5;
				}
				
			    public String PLU_Fonction;

				public String getPLU_Fonction () {
					return this.PLU_Fonction;
				}
				
			    public Character sep6;

				public Character getSep6 () {
					return this.sep6;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Character sep7;

				public Character getSep7 () {
					return this.sep7;
				}
				
			    public Float quantite;

				public Float getQuantite () {
					return this.quantite;
				}
				
			    public Character sep8;

				public Character getSep8 () {
					return this.sep8;
				}
				
			    public Float prix_vente;

				public Float getPrix_vente () {
					return this.prix_vente;
				}
				
			    public Character sep9;

				public Character getSep9 () {
					return this.sep9;
				}
				
			    public String pos_id;

				public String getPos_id () {
					return this.pos_id;
				}
				
			    public Character sep10;

				public Character getSep10 () {
					return this.sep10;
				}
				
			    public String code_caissier;

				public String getCode_caissier () {
					return this.code_caissier;
				}
				
			    public Character sep11;

				public Character getSep11 () {
					return this.sep11;
				}
				
			    public String nom_caissier;

				public String getNom_caissier () {
					return this.nom_caissier;
				}
				
			    public Character sep12;

				public Character getSep12 () {
					return this.sep12;
				}
				
			    public String code_parution;

				public String getCode_parution () {
					return this.code_parution;
				}
				
			    public Character sep13;

				public Character getSep13 () {
					return this.sep13;
				}
				
			    public String code_tva;

				public String getCode_tva () {
					return this.code_tva;
				}
				
			    public Character sep14;

				public Character getSep14 () {
					return this.sep14;
				}
				
			    public String num_commande_recu;

				public String getNum_commande_recu () {
					return this.num_commande_recu;
				}
				
			    public Character sep15;

				public Character getSep15 () {
					return this.sep15;
				}
				
			    public String code_magasin;

				public String getCode_magasin () {
					return this.code_magasin;
				}
				
			    public Character sep16;

				public Character getSep16 () {
					return this.sep16;
				}
				
			    public String code_interne;

				public String getCode_interne () {
					return this.code_interne;
				}
				
			    public Character sep17;

				public Character getSep17 () {
					return this.sep17;
				}
				
			    public String carte_fidelite;

				public String getCarte_fidelite () {
					return this.carte_fidelite;
				}
				
			    public Character sep18;

				public Character getSep18 () {
					return this.sep18;
				}
				
			    public Float pourcentage_reduction;

				public Float getPourcentage_reduction () {
					return this.pourcentage_reduction;
				}
				
			    public Character sep19;

				public Character getSep19 () {
					return this.sep19;
				}
				
			    public Float montant_reduction;

				public Float getMontant_reduction () {
					return this.montant_reduction;
				}
				
			    public Character sep20;

				public Character getSep20 () {
					return this.sep20;
				}
				
			    public String function_code;

				public String getFunction_code () {
					return this.function_code;
				}
				
			    public Character sep21;

				public Character getSep21 () {
					return this.sep21;
				}
				
			    public String num_ticket_restaurant;

				public String getNum_ticket_restaurant () {
					return this.num_ticket_restaurant;
				}
				
			    public Character sep22;

				public Character getSep22 () {
					return this.sep22;
				}
				
			    public String niveau_prix;

				public String getNiveau_prix () {
					return this.niveau_prix;
				}
				
			    public Character sep23;

				public Character getSep23 () {
					return this.sep23;
				}
				
			    public Float poids_vendu;

				public Float getPoids_vendu () {
					return this.poids_vendu;
				}
				
			    public Character sep24;

				public Character getSep24 () {
					return this.sep24;
				}
				
			    public Float prix_achat;

				public Float getPrix_achat () {
					return this.prix_achat;
				}
				
			    public Character sep25;

				public Character getSep25 () {
					return this.sep25;
				}
				
			    public String gencod;

				public String getGencod () {
					return this.gencod;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length) {
				if(length < 1024 && commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length == 0) {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[1024];
				} else {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length);
			strReturn = new String(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes) {

        	try {

        		int length = 0;
		
					this.num_ticket = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep1 = null;
           				} else {
           			    	this.sep1 = dis.readChar();
           				}
					
					this.id_date_recu = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep2 = null;
           				} else {
           			    	this.sep2 = dis.readChar();
           				}
					
					this.heure_vente = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep3 = null;
           				} else {
           			    	this.sep3 = dis.readChar();
           				}
					
					this.code_client = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep4 = null;
           				} else {
           			    	this.sep4 = dis.readChar();
           				}
					
					this.code_departement = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep5 = null;
           				} else {
           			    	this.sep5 = dis.readChar();
           				}
					
					this.PLU_Fonction = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep6 = null;
           				} else {
           			    	this.sep6 = dis.readChar();
           				}
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep7 = null;
           				} else {
           			    	this.sep7 = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quantite = null;
           				} else {
           			    	this.quantite = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep8 = null;
           				} else {
           			    	this.sep8 = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_vente = null;
           				} else {
           			    	this.prix_vente = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep9 = null;
           				} else {
           			    	this.sep9 = dis.readChar();
           				}
					
					this.pos_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep10 = null;
           				} else {
           			    	this.sep10 = dis.readChar();
           				}
					
					this.code_caissier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep11 = null;
           				} else {
           			    	this.sep11 = dis.readChar();
           				}
					
					this.nom_caissier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep12 = null;
           				} else {
           			    	this.sep12 = dis.readChar();
           				}
					
					this.code_parution = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep13 = null;
           				} else {
           			    	this.sep13 = dis.readChar();
           				}
					
					this.code_tva = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep14 = null;
           				} else {
           			    	this.sep14 = dis.readChar();
           				}
					
					this.num_commande_recu = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep15 = null;
           				} else {
           			    	this.sep15 = dis.readChar();
           				}
					
					this.code_magasin = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep16 = null;
           				} else {
           			    	this.sep16 = dis.readChar();
           				}
					
					this.code_interne = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep17 = null;
           				} else {
           			    	this.sep17 = dis.readChar();
           				}
					
					this.carte_fidelite = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep18 = null;
           				} else {
           			    	this.sep18 = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pourcentage_reduction = null;
           				} else {
           			    	this.pourcentage_reduction = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep19 = null;
           				} else {
           			    	this.sep19 = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.montant_reduction = null;
           				} else {
           			    	this.montant_reduction = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep20 = null;
           				} else {
           			    	this.sep20 = dis.readChar();
           				}
					
					this.function_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep21 = null;
           				} else {
           			    	this.sep21 = dis.readChar();
           				}
					
					this.num_ticket_restaurant = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep22 = null;
           				} else {
           			    	this.sep22 = dis.readChar();
           				}
					
					this.niveau_prix = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep23 = null;
           				} else {
           			    	this.sep23 = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.poids_vendu = null;
           				} else {
           			    	this.poids_vendu = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep24 = null;
           				} else {
           			    	this.sep24 = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_achat = null;
           				} else {
           			    	this.prix_achat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep25 = null;
           				} else {
           			    	this.sep25 = dis.readChar();
           				}
					
					this.gencod = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.num_ticket,dos);
					
					// Character
				
						if(this.sep1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep1);
		            	}
					
					// String
				
						writeString(this.id_date_recu,dos);
					
					// Character
				
						if(this.sep2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep2);
		            	}
					
					// String
				
						writeString(this.heure_vente,dos);
					
					// Character
				
						if(this.sep3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep3);
		            	}
					
					// String
				
						writeString(this.code_client,dos);
					
					// Character
				
						if(this.sep4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep4);
		            	}
					
					// String
				
						writeString(this.code_departement,dos);
					
					// Character
				
						if(this.sep5 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep5);
		            	}
					
					// String
				
						writeString(this.PLU_Fonction,dos);
					
					// Character
				
						if(this.sep6 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep6);
		            	}
					
					// String
				
						writeString(this.description,dos);
					
					// Character
				
						if(this.sep7 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep7);
		            	}
					
					// Float
				
						if(this.quantite == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.quantite);
		            	}
					
					// Character
				
						if(this.sep8 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep8);
		            	}
					
					// Float
				
						if(this.prix_vente == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_vente);
		            	}
					
					// Character
				
						if(this.sep9 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep9);
		            	}
					
					// String
				
						writeString(this.pos_id,dos);
					
					// Character
				
						if(this.sep10 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep10);
		            	}
					
					// String
				
						writeString(this.code_caissier,dos);
					
					// Character
				
						if(this.sep11 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep11);
		            	}
					
					// String
				
						writeString(this.nom_caissier,dos);
					
					// Character
				
						if(this.sep12 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep12);
		            	}
					
					// String
				
						writeString(this.code_parution,dos);
					
					// Character
				
						if(this.sep13 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep13);
		            	}
					
					// String
				
						writeString(this.code_tva,dos);
					
					// Character
				
						if(this.sep14 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep14);
		            	}
					
					// String
				
						writeString(this.num_commande_recu,dos);
					
					// Character
				
						if(this.sep15 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep15);
		            	}
					
					// String
				
						writeString(this.code_magasin,dos);
					
					// Character
				
						if(this.sep16 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep16);
		            	}
					
					// String
				
						writeString(this.code_interne,dos);
					
					// Character
				
						if(this.sep17 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep17);
		            	}
					
					// String
				
						writeString(this.carte_fidelite,dos);
					
					// Character
				
						if(this.sep18 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep18);
		            	}
					
					// Float
				
						if(this.pourcentage_reduction == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.pourcentage_reduction);
		            	}
					
					// Character
				
						if(this.sep19 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep19);
		            	}
					
					// Float
				
						if(this.montant_reduction == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.montant_reduction);
		            	}
					
					// Character
				
						if(this.sep20 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep20);
		            	}
					
					// String
				
						writeString(this.function_code,dos);
					
					// Character
				
						if(this.sep21 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep21);
		            	}
					
					// String
				
						writeString(this.num_ticket_restaurant,dos);
					
					// Character
				
						if(this.sep22 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep22);
		            	}
					
					// String
				
						writeString(this.niveau_prix,dos);
					
					// Character
				
						if(this.sep23 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep23);
		            	}
					
					// Float
				
						if(this.poids_vendu == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.poids_vendu);
		            	}
					
					// Character
				
						if(this.sep24 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep24);
		            	}
					
					// Float
				
						if(this.prix_achat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_achat);
		            	}
					
					// Character
				
						if(this.sep25 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep25);
		            	}
					
					// String
				
						writeString(this.gencod,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("num_ticket="+num_ticket);
		sb.append(",sep1="+String.valueOf(sep1));
		sb.append(",id_date_recu="+id_date_recu);
		sb.append(",sep2="+String.valueOf(sep2));
		sb.append(",heure_vente="+heure_vente);
		sb.append(",sep3="+String.valueOf(sep3));
		sb.append(",code_client="+code_client);
		sb.append(",sep4="+String.valueOf(sep4));
		sb.append(",code_departement="+code_departement);
		sb.append(",sep5="+String.valueOf(sep5));
		sb.append(",PLU_Fonction="+PLU_Fonction);
		sb.append(",sep6="+String.valueOf(sep6));
		sb.append(",description="+description);
		sb.append(",sep7="+String.valueOf(sep7));
		sb.append(",quantite="+String.valueOf(quantite));
		sb.append(",sep8="+String.valueOf(sep8));
		sb.append(",prix_vente="+String.valueOf(prix_vente));
		sb.append(",sep9="+String.valueOf(sep9));
		sb.append(",pos_id="+pos_id);
		sb.append(",sep10="+String.valueOf(sep10));
		sb.append(",code_caissier="+code_caissier);
		sb.append(",sep11="+String.valueOf(sep11));
		sb.append(",nom_caissier="+nom_caissier);
		sb.append(",sep12="+String.valueOf(sep12));
		sb.append(",code_parution="+code_parution);
		sb.append(",sep13="+String.valueOf(sep13));
		sb.append(",code_tva="+code_tva);
		sb.append(",sep14="+String.valueOf(sep14));
		sb.append(",num_commande_recu="+num_commande_recu);
		sb.append(",sep15="+String.valueOf(sep15));
		sb.append(",code_magasin="+code_magasin);
		sb.append(",sep16="+String.valueOf(sep16));
		sb.append(",code_interne="+code_interne);
		sb.append(",sep17="+String.valueOf(sep17));
		sb.append(",carte_fidelite="+carte_fidelite);
		sb.append(",sep18="+String.valueOf(sep18));
		sb.append(",pourcentage_reduction="+String.valueOf(pourcentage_reduction));
		sb.append(",sep19="+String.valueOf(sep19));
		sb.append(",montant_reduction="+String.valueOf(montant_reduction));
		sb.append(",sep20="+String.valueOf(sep20));
		sb.append(",function_code="+function_code);
		sb.append(",sep21="+String.valueOf(sep21));
		sb.append(",num_ticket_restaurant="+num_ticket_restaurant);
		sb.append(",sep22="+String.valueOf(sep22));
		sb.append(",niveau_prix="+niveau_prix);
		sb.append(",sep23="+String.valueOf(sep23));
		sb.append(",poids_vendu="+String.valueOf(poids_vendu));
		sb.append(",sep24="+String.valueOf(sep24));
		sb.append(",prix_achat="+String.valueOf(prix_achat));
		sb.append(",sep25="+String.valueOf(sep25));
		sb.append(",gencod="+gencod);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ticketsStruct implements routines.system.IPersistableRow<ticketsStruct> {
    final static byte[] commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
    static byte[] commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];

	
			    public String num_ticket;

				public String getNum_ticket () {
					return this.num_ticket;
				}
				
			    public Character sep1;

				public Character getSep1 () {
					return this.sep1;
				}
				
			    public String id_date_recu;

				public String getId_date_recu () {
					return this.id_date_recu;
				}
				
			    public Character sep2;

				public Character getSep2 () {
					return this.sep2;
				}
				
			    public String heure_vente;

				public String getHeure_vente () {
					return this.heure_vente;
				}
				
			    public Character sep3;

				public Character getSep3 () {
					return this.sep3;
				}
				
			    public String code_client;

				public String getCode_client () {
					return this.code_client;
				}
				
			    public Character sep4;

				public Character getSep4 () {
					return this.sep4;
				}
				
			    public String code_departement;

				public String getCode_departement () {
					return this.code_departement;
				}
				
			    public Character sep5;

				public Character getSep5 () {
					return this.sep5;
				}
				
			    public String PLU_Fonction;

				public String getPLU_Fonction () {
					return this.PLU_Fonction;
				}
				
			    public Character sep6;

				public Character getSep6 () {
					return this.sep6;
				}
				
			    public String description;

				public String getDescription () {
					return this.description;
				}
				
			    public Character sep7;

				public Character getSep7 () {
					return this.sep7;
				}
				
			    public Float quantite;

				public Float getQuantite () {
					return this.quantite;
				}
				
			    public Character sep8;

				public Character getSep8 () {
					return this.sep8;
				}
				
			    public Float prix_vente;

				public Float getPrix_vente () {
					return this.prix_vente;
				}
				
			    public Character sep9;

				public Character getSep9 () {
					return this.sep9;
				}
				
			    public String pos_id;

				public String getPos_id () {
					return this.pos_id;
				}
				
			    public Character sep10;

				public Character getSep10 () {
					return this.sep10;
				}
				
			    public String code_caissier;

				public String getCode_caissier () {
					return this.code_caissier;
				}
				
			    public Character sep11;

				public Character getSep11 () {
					return this.sep11;
				}
				
			    public String nom_caissier;

				public String getNom_caissier () {
					return this.nom_caissier;
				}
				
			    public Character sep12;

				public Character getSep12 () {
					return this.sep12;
				}
				
			    public String code_parution;

				public String getCode_parution () {
					return this.code_parution;
				}
				
			    public Character sep13;

				public Character getSep13 () {
					return this.sep13;
				}
				
			    public String code_tva;

				public String getCode_tva () {
					return this.code_tva;
				}
				
			    public Character sep14;

				public Character getSep14 () {
					return this.sep14;
				}
				
			    public String num_commande_recu;

				public String getNum_commande_recu () {
					return this.num_commande_recu;
				}
				
			    public Character sep15;

				public Character getSep15 () {
					return this.sep15;
				}
				
			    public String code_magasin;

				public String getCode_magasin () {
					return this.code_magasin;
				}
				
			    public Character sep16;

				public Character getSep16 () {
					return this.sep16;
				}
				
			    public String code_interne;

				public String getCode_interne () {
					return this.code_interne;
				}
				
			    public Character sep17;

				public Character getSep17 () {
					return this.sep17;
				}
				
			    public String carte_fidelite;

				public String getCarte_fidelite () {
					return this.carte_fidelite;
				}
				
			    public Character sep18;

				public Character getSep18 () {
					return this.sep18;
				}
				
			    public Float pourcentage_reduction;

				public Float getPourcentage_reduction () {
					return this.pourcentage_reduction;
				}
				
			    public Character sep19;

				public Character getSep19 () {
					return this.sep19;
				}
				
			    public Float montant_reduction;

				public Float getMontant_reduction () {
					return this.montant_reduction;
				}
				
			    public Character sep20;

				public Character getSep20 () {
					return this.sep20;
				}
				
			    public String function_code;

				public String getFunction_code () {
					return this.function_code;
				}
				
			    public Character sep21;

				public Character getSep21 () {
					return this.sep21;
				}
				
			    public String num_ticket_restaurant;

				public String getNum_ticket_restaurant () {
					return this.num_ticket_restaurant;
				}
				
			    public Character sep22;

				public Character getSep22 () {
					return this.sep22;
				}
				
			    public String niveau_prix;

				public String getNiveau_prix () {
					return this.niveau_prix;
				}
				
			    public Character sep23;

				public Character getSep23 () {
					return this.sep23;
				}
				
			    public Float poids_vendu;

				public Float getPoids_vendu () {
					return this.poids_vendu;
				}
				
			    public Character sep24;

				public Character getSep24 () {
					return this.sep24;
				}
				
			    public Float prix_achat;

				public Float getPrix_achat () {
					return this.prix_achat;
				}
				
			    public Character sep25;

				public Character getSep25 () {
					return this.sep25;
				}
				
			    public String gencod;

				public String getGencod () {
					return this.gencod;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length) {
				if(length < 1024 && commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length == 0) {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[1024];
				} else {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length);
			strReturn = new String(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes) {

        	try {

        		int length = 0;
		
					this.num_ticket = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep1 = null;
           				} else {
           			    	this.sep1 = dis.readChar();
           				}
					
					this.id_date_recu = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep2 = null;
           				} else {
           			    	this.sep2 = dis.readChar();
           				}
					
					this.heure_vente = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep3 = null;
           				} else {
           			    	this.sep3 = dis.readChar();
           				}
					
					this.code_client = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep4 = null;
           				} else {
           			    	this.sep4 = dis.readChar();
           				}
					
					this.code_departement = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep5 = null;
           				} else {
           			    	this.sep5 = dis.readChar();
           				}
					
					this.PLU_Fonction = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep6 = null;
           				} else {
           			    	this.sep6 = dis.readChar();
           				}
					
					this.description = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep7 = null;
           				} else {
           			    	this.sep7 = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.quantite = null;
           				} else {
           			    	this.quantite = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep8 = null;
           				} else {
           			    	this.sep8 = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_vente = null;
           				} else {
           			    	this.prix_vente = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep9 = null;
           				} else {
           			    	this.sep9 = dis.readChar();
           				}
					
					this.pos_id = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep10 = null;
           				} else {
           			    	this.sep10 = dis.readChar();
           				}
					
					this.code_caissier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep11 = null;
           				} else {
           			    	this.sep11 = dis.readChar();
           				}
					
					this.nom_caissier = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep12 = null;
           				} else {
           			    	this.sep12 = dis.readChar();
           				}
					
					this.code_parution = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep13 = null;
           				} else {
           			    	this.sep13 = dis.readChar();
           				}
					
					this.code_tva = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep14 = null;
           				} else {
           			    	this.sep14 = dis.readChar();
           				}
					
					this.num_commande_recu = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep15 = null;
           				} else {
           			    	this.sep15 = dis.readChar();
           				}
					
					this.code_magasin = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep16 = null;
           				} else {
           			    	this.sep16 = dis.readChar();
           				}
					
					this.code_interne = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep17 = null;
           				} else {
           			    	this.sep17 = dis.readChar();
           				}
					
					this.carte_fidelite = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep18 = null;
           				} else {
           			    	this.sep18 = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.pourcentage_reduction = null;
           				} else {
           			    	this.pourcentage_reduction = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep19 = null;
           				} else {
           			    	this.sep19 = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.montant_reduction = null;
           				} else {
           			    	this.montant_reduction = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep20 = null;
           				} else {
           			    	this.sep20 = dis.readChar();
           				}
					
					this.function_code = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep21 = null;
           				} else {
           			    	this.sep21 = dis.readChar();
           				}
					
					this.num_ticket_restaurant = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep22 = null;
           				} else {
           			    	this.sep22 = dis.readChar();
           				}
					
					this.niveau_prix = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep23 = null;
           				} else {
           			    	this.sep23 = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.poids_vendu = null;
           				} else {
           			    	this.poids_vendu = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep24 = null;
           				} else {
           			    	this.sep24 = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_achat = null;
           				} else {
           			    	this.prix_achat = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.sep25 = null;
           				} else {
           			    	this.sep25 = dis.readChar();
           				}
					
					this.gencod = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.num_ticket,dos);
					
					// Character
				
						if(this.sep1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep1);
		            	}
					
					// String
				
						writeString(this.id_date_recu,dos);
					
					// Character
				
						if(this.sep2 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep2);
		            	}
					
					// String
				
						writeString(this.heure_vente,dos);
					
					// Character
				
						if(this.sep3 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep3);
		            	}
					
					// String
				
						writeString(this.code_client,dos);
					
					// Character
				
						if(this.sep4 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep4);
		            	}
					
					// String
				
						writeString(this.code_departement,dos);
					
					// Character
				
						if(this.sep5 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep5);
		            	}
					
					// String
				
						writeString(this.PLU_Fonction,dos);
					
					// Character
				
						if(this.sep6 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep6);
		            	}
					
					// String
				
						writeString(this.description,dos);
					
					// Character
				
						if(this.sep7 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep7);
		            	}
					
					// Float
				
						if(this.quantite == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.quantite);
		            	}
					
					// Character
				
						if(this.sep8 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep8);
		            	}
					
					// Float
				
						if(this.prix_vente == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_vente);
		            	}
					
					// Character
				
						if(this.sep9 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep9);
		            	}
					
					// String
				
						writeString(this.pos_id,dos);
					
					// Character
				
						if(this.sep10 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep10);
		            	}
					
					// String
				
						writeString(this.code_caissier,dos);
					
					// Character
				
						if(this.sep11 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep11);
		            	}
					
					// String
				
						writeString(this.nom_caissier,dos);
					
					// Character
				
						if(this.sep12 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep12);
		            	}
					
					// String
				
						writeString(this.code_parution,dos);
					
					// Character
				
						if(this.sep13 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep13);
		            	}
					
					// String
				
						writeString(this.code_tva,dos);
					
					// Character
				
						if(this.sep14 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep14);
		            	}
					
					// String
				
						writeString(this.num_commande_recu,dos);
					
					// Character
				
						if(this.sep15 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep15);
		            	}
					
					// String
				
						writeString(this.code_magasin,dos);
					
					// Character
				
						if(this.sep16 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep16);
		            	}
					
					// String
				
						writeString(this.code_interne,dos);
					
					// Character
				
						if(this.sep17 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep17);
		            	}
					
					// String
				
						writeString(this.carte_fidelite,dos);
					
					// Character
				
						if(this.sep18 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep18);
		            	}
					
					// Float
				
						if(this.pourcentage_reduction == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.pourcentage_reduction);
		            	}
					
					// Character
				
						if(this.sep19 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep19);
		            	}
					
					// Float
				
						if(this.montant_reduction == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.montant_reduction);
		            	}
					
					// Character
				
						if(this.sep20 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep20);
		            	}
					
					// String
				
						writeString(this.function_code,dos);
					
					// Character
				
						if(this.sep21 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep21);
		            	}
					
					// String
				
						writeString(this.num_ticket_restaurant,dos);
					
					// Character
				
						if(this.sep22 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep22);
		            	}
					
					// String
				
						writeString(this.niveau_prix,dos);
					
					// Character
				
						if(this.sep23 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep23);
		            	}
					
					// Float
				
						if(this.poids_vendu == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.poids_vendu);
		            	}
					
					// Character
				
						if(this.sep24 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep24);
		            	}
					
					// Float
				
						if(this.prix_achat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.prix_achat);
		            	}
					
					// Character
				
						if(this.sep25 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.sep25);
		            	}
					
					// String
				
						writeString(this.gencod,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("num_ticket="+num_ticket);
		sb.append(",sep1="+String.valueOf(sep1));
		sb.append(",id_date_recu="+id_date_recu);
		sb.append(",sep2="+String.valueOf(sep2));
		sb.append(",heure_vente="+heure_vente);
		sb.append(",sep3="+String.valueOf(sep3));
		sb.append(",code_client="+code_client);
		sb.append(",sep4="+String.valueOf(sep4));
		sb.append(",code_departement="+code_departement);
		sb.append(",sep5="+String.valueOf(sep5));
		sb.append(",PLU_Fonction="+PLU_Fonction);
		sb.append(",sep6="+String.valueOf(sep6));
		sb.append(",description="+description);
		sb.append(",sep7="+String.valueOf(sep7));
		sb.append(",quantite="+String.valueOf(quantite));
		sb.append(",sep8="+String.valueOf(sep8));
		sb.append(",prix_vente="+String.valueOf(prix_vente));
		sb.append(",sep9="+String.valueOf(sep9));
		sb.append(",pos_id="+pos_id);
		sb.append(",sep10="+String.valueOf(sep10));
		sb.append(",code_caissier="+code_caissier);
		sb.append(",sep11="+String.valueOf(sep11));
		sb.append(",nom_caissier="+nom_caissier);
		sb.append(",sep12="+String.valueOf(sep12));
		sb.append(",code_parution="+code_parution);
		sb.append(",sep13="+String.valueOf(sep13));
		sb.append(",code_tva="+code_tva);
		sb.append(",sep14="+String.valueOf(sep14));
		sb.append(",num_commande_recu="+num_commande_recu);
		sb.append(",sep15="+String.valueOf(sep15));
		sb.append(",code_magasin="+code_magasin);
		sb.append(",sep16="+String.valueOf(sep16));
		sb.append(",code_interne="+code_interne);
		sb.append(",sep17="+String.valueOf(sep17));
		sb.append(",carte_fidelite="+carte_fidelite);
		sb.append(",sep18="+String.valueOf(sep18));
		sb.append(",pourcentage_reduction="+String.valueOf(pourcentage_reduction));
		sb.append(",sep19="+String.valueOf(sep19));
		sb.append(",montant_reduction="+String.valueOf(montant_reduction));
		sb.append(",sep20="+String.valueOf(sep20));
		sb.append(",function_code="+function_code);
		sb.append(",sep21="+String.valueOf(sep21));
		sb.append(",num_ticket_restaurant="+num_ticket_restaurant);
		sb.append(",sep22="+String.valueOf(sep22));
		sb.append(",niveau_prix="+niveau_prix);
		sb.append(",sep23="+String.valueOf(sep23));
		sb.append(",poids_vendu="+String.valueOf(poids_vendu));
		sb.append(",sep24="+String.valueOf(sep24));
		sb.append(",prix_achat="+String.valueOf(prix_achat));
		sb.append(",sep25="+String.valueOf(sep25));
		sb.append(",gencod="+gencod);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ticketsStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileList_1Struct implements routines.system.IPersistableRow<after_tFileList_1Struct> {
    final static byte[] commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
    static byte[] commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileList_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);
		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);

		ticketsStruct tickets = new ticketsStruct();
row2Struct row2 = new row2Struct();
def_cod_magStruct def_cod_mag = new def_cod_magStruct();
cle_mag_verifieStruct cle_mag_verifie = new cle_mag_verifieStruct();
cle_art_verifieStruct cle_art_verifie = new cle_art_verifieStruct();
fait_ventesStruct fait_ventes = new fait_ventesStruct();
row1Struct row1 = new row1Struct();



	
	/**
	 * [tFileList_1 begin ] start
	 */

				
			int NB_ITERATE_tFileInputPositional_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFileList_1", false);
		start_Hash.put("tFileList_1", System.currentTimeMillis());
		
	
	currentComponent="tFileList_1";

	
		int tos_count_tFileList_1 = 0;
		
	
 
     
    
  String directory_tFileList_1 = "C:/Users/deric/Documents/Formation DTA Ingénierie/Projet magasin distribution/Sujet/données/Ticket";
  final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
  final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
      maskList_tFileList_1.add("*");  
  for (final String filemask_tFileList_1 : maskList_tFileList_1) {
	String filemask_compile_tFileList_1 = filemask_tFileList_1;
	
		filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);
	
		java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern.compile(filemask_compile_tFileList_1);
	patternList_tFileList_1.add(fileNamePattern_tFileList_1);
  }
  int NB_FILEtFileList_1 = 0;

  final boolean case_sensitive_tFileList_1 = true;
    final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
    final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
	java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);
    
		file_tFileList_1.listFiles(new java.io.FilenameFilter() {
			public boolean accept(java.io.File dir, String name) {
				java.io.File file = new java.io.File(dir, name);
				
	                if (!file.isDirectory()) {
						
    	String fileName_tFileList_1 = file.getName();
		for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
          	if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()){
					if(!filePath_tFileList_1.contains(file.getAbsolutePath())) {
			          list_tFileList_1.add(file);
			          filePath_tFileList_1.add(file.getAbsolutePath());
			        }
			}
		}
	                	return true;
	                } else {
	                  file.listFiles(this);
	                }
				
				return false;
			}
		}
		); 
      java.util.Collections.sort(list_tFileList_1);
    
    for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++){
      java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
      String fileName_tFileList_1 = files_tFileList_1.getName();
      
      String currentFileName_tFileList_1 = files_tFileList_1.getName(); 
      String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
      String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
      String currentFileExtension_tFileList_1 = null;
      
      if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()){
        currentFileExtension_tFileList_1 = files_tFileList_1.getName().substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
      } else{
        currentFileExtension_tFileList_1 = "";
      }
      
      NB_FILEtFileList_1 ++;
      globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
      globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
      globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
      
 



/**
 * [tFileList_1 begin ] stop
 */
	
	/**
	 * [tFileList_1 main ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 


	tos_count_tFileList_1++;

/**
 * [tFileList_1 main ] stop
 */
	
	/**
	 * [tFileList_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_begin ] stop
 */
	NB_ITERATE_tFileInputPositional_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("tickets", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("cle_art_verifie", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("fait_ventes", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("cle_mag_verifie", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("def_cod_mag", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFileInputPositional_1);
					//Thread.sleep(1000);
				}				
			








	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row1"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("fait_ventes"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		





        int updateKeyCount_tDBOutput_1 = 1;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        }

int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;

int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "fait_ventes";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
		String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
		String url_tDBOutput_1 = null;
		if(dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
			url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "grande_distribution_db" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tDBOutput_1 = "noDatetimeStringSync=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
			if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
				properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "grande_distribution_db" + "?" + properties_tDBOutput_1;
		}
		String driverClass_tDBOutput_1 = "com.mysql.jdbc.Driver";
		
		String dbUser_tDBOutput_1 = "root";
		

		 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");

		String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
		java.lang.Class.forName(driverClass_tDBOutput_1);
		
		conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
		
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;

int count_tDBOutput_1=0;
    	
	    java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM `" + "fait_ventes" + "` WHERE `id_vente` = ?");
	    resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
	    String insert_tDBOutput_1 = "INSERT INTO `" + "fait_ventes" + "` (`id_vente`,`num_ticket`,`id_date_vente`,`ref_produit`,`code_magasin`,`heure_vente`,`department_code`,`description`,`code_tva`,`prix_achat`,`quantite`,`prix_vente`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
	        
	    java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
	    resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
	    String update_tDBOutput_1 = "UPDATE `" + "fait_ventes" + "` SET `num_ticket` = ?,`id_date_vente` = ?,`ref_produit` = ?,`code_magasin` = ?,`heure_vente` = ?,`department_code` = ?,`description` = ?,`code_tva` = ?,`prix_achat` = ?,`quantite` = ?,`prix_vente` = ? WHERE `id_vente` = ?";
	    
	    java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
	    resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
	    

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("cle_art_verifie"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<tempsStruct> tHash_Lookup_temps = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<tempsStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<tempsStruct>) 
					globalMap.get( "tHash_Lookup_temps" ))
					;					
					
	

tempsStruct tempsHashKey = new tempsStruct();
tempsStruct tempsDefault = new tempsStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	String var1;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
fait_ventesStruct fait_ventes_tmp = new fait_ventesStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("cle_mag_verifie"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<articleStruct> tHash_Lookup_article = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<articleStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<articleStruct>) 
					globalMap.get( "tHash_Lookup_article" ))
					;					
					
	

articleStruct articleHashKey = new articleStruct();
articleStruct articleDefault = new articleStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	String var1;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
cle_art_verifieStruct cle_art_verifie_tmp = new cle_art_verifieStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("def_cod_mag"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<magasinsStruct> tHash_Lookup_magasins = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<magasinsStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<magasinsStruct>) 
					globalMap.get( "tHash_Lookup_magasins" ))
					;					
					
	

magasinsStruct magasinsHashKey = new magasinsStruct();
magasinsStruct magasinsDefault = new magasinsStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
cle_mag_verifieStruct cle_mag_verifie_tmp = new cle_mag_verifieStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row2"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
def_cod_magStruct def_cod_mag_tmp = new def_cod_magStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("tickets"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputPositional_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputPositional_1", false);
		start_Hash.put("tFileInputPositional_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputPositional_1";

	
		int tos_count_tFileInputPositional_1 = 0;
		
	
    		boolean useStar_tFileInputPositional_1 = false;
    		
            	String pattern_tFileInputPositional_1 = "10,1,8,1,4,1,10,1,2,1,13,1,50,1,10,1,10,1,2,1,2,1,20,1,6,1,2,1,3,1,3,1,2,1,20,1,6,1,10,1,3,1,50,1,2,1,10,1,10,1,25";
            	
                final String[] positions_tFileInputPositional_1 = pattern_tFileInputPositional_1.trim().split(",");
                for(int i_tFileInputPositional_1=0;i_tFileInputPositional_1<positions_tFileInputPositional_1.length;i_tFileInputPositional_1++){
                	if("".equals(positions_tFileInputPositional_1[i_tFileInputPositional_1])){
                   	 	positions_tFileInputPositional_1[i_tFileInputPositional_1]="0";
                	}
                	if("*".equals(positions_tFileInputPositional_1[i_tFileInputPositional_1])){
                		useStar_tFileInputPositional_1 = true;
                	}
                }
            int nb_line_tFileInputPositional_1 = 0;
            int footer_tFileInputPositional_1  = 0;
            int nb_limit_tFileInputPositional_1 = -1;

			

			class PositionalUtil_tFileInputPositional_1{
				private boolean useStar = false;
                				
				public void setUseStar(boolean useStar) {
					this.useStar = useStar;
				}
                        		    	int parseValue_0(String row_tFileInputPositional_1, int substringBegintFileInputPositional_1, int substringEndtFileInputPositional_1, int rowLen_tFileInputPositional_1, String[] columnValuetFileInputPositional_1 )throws java.lang.Exception{
                        		    
										if(positions_tFileInputPositional_1.length <= 0) {
											columnValuetFileInputPositional_1[0]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[0]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[0])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[0]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[0] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[0] = columnValuetFileInputPositional_1[0].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 1) {
											columnValuetFileInputPositional_1[1]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[1]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[1])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[1]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[1] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[1] = columnValuetFileInputPositional_1[1].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 2) {
											columnValuetFileInputPositional_1[2]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[2]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[2])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[2]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[2] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[2] = columnValuetFileInputPositional_1[2].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 3) {
											columnValuetFileInputPositional_1[3]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[3]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[3])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[3]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[3] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[3] = columnValuetFileInputPositional_1[3].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 4) {
											columnValuetFileInputPositional_1[4]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[4]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[4])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[4]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[4] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[4] = columnValuetFileInputPositional_1[4].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 5) {
											columnValuetFileInputPositional_1[5]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[5]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[5])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[5]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[5] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[5] = columnValuetFileInputPositional_1[5].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 6) {
											columnValuetFileInputPositional_1[6]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[6]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[6])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[6]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[6] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[6] = columnValuetFileInputPositional_1[6].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 7) {
											columnValuetFileInputPositional_1[7]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[7]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[7])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[7]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[7] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[7] = columnValuetFileInputPositional_1[7].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 8) {
											columnValuetFileInputPositional_1[8]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[8]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[8])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[8]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[8] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[8] = columnValuetFileInputPositional_1[8].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 9) {
											columnValuetFileInputPositional_1[9]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[9]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[9])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[9]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[9] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[9] = columnValuetFileInputPositional_1[9].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 10) {
											columnValuetFileInputPositional_1[10]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[10]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[10])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[10]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[10] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[10] = columnValuetFileInputPositional_1[10].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 11) {
											columnValuetFileInputPositional_1[11]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[11]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[11])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[11]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[11] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[11] = columnValuetFileInputPositional_1[11].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 12) {
											columnValuetFileInputPositional_1[12]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[12]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[12])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[12]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[12] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[12] = columnValuetFileInputPositional_1[12].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 13) {
											columnValuetFileInputPositional_1[13]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[13]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[13])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[13]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[13] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[13] = columnValuetFileInputPositional_1[13].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 14) {
											columnValuetFileInputPositional_1[14]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[14]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[14])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[14]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[14] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[14] = columnValuetFileInputPositional_1[14].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 15) {
											columnValuetFileInputPositional_1[15]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[15]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[15])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[15]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[15] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[15] = columnValuetFileInputPositional_1[15].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 16) {
											columnValuetFileInputPositional_1[16]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[16]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[16])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[16]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[16] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[16] = columnValuetFileInputPositional_1[16].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 17) {
											columnValuetFileInputPositional_1[17]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[17]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[17])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[17]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[17] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[17] = columnValuetFileInputPositional_1[17].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 18) {
											columnValuetFileInputPositional_1[18]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[18]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[18])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[18]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[18] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[18] = columnValuetFileInputPositional_1[18].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 19) {
											columnValuetFileInputPositional_1[19]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[19]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[19])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[19]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[19] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[19] = columnValuetFileInputPositional_1[19].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 20) {
											columnValuetFileInputPositional_1[20]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[20]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[20])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[20]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[20] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[20] = columnValuetFileInputPositional_1[20].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 21) {
											columnValuetFileInputPositional_1[21]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[21]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[21])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[21]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[21] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[21] = columnValuetFileInputPositional_1[21].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 22) {
											columnValuetFileInputPositional_1[22]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[22]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[22])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[22]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[22] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[22] = columnValuetFileInputPositional_1[22].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 23) {
											columnValuetFileInputPositional_1[23]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[23]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[23])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[23]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[23] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[23] = columnValuetFileInputPositional_1[23].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 24) {
											columnValuetFileInputPositional_1[24]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[24]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[24])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[24]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[24] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[24] = columnValuetFileInputPositional_1[24].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 25) {
											columnValuetFileInputPositional_1[25]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[25]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[25])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[25]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[25] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[25] = columnValuetFileInputPositional_1[25].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 26) {
											columnValuetFileInputPositional_1[26]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[26]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[26])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[26]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[26] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[26] = columnValuetFileInputPositional_1[26].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 27) {
											columnValuetFileInputPositional_1[27]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[27]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[27])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[27]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[27] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[27] = columnValuetFileInputPositional_1[27].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 28) {
											columnValuetFileInputPositional_1[28]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[28]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[28])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[28]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[28] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[28] = columnValuetFileInputPositional_1[28].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 29) {
											columnValuetFileInputPositional_1[29]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[29]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[29])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[29]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[29] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[29] = columnValuetFileInputPositional_1[29].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 30) {
											columnValuetFileInputPositional_1[30]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[30]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[30])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[30]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[30] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[30] = columnValuetFileInputPositional_1[30].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 31) {
											columnValuetFileInputPositional_1[31]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[31]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[31])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[31]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[31] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[31] = columnValuetFileInputPositional_1[31].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 32) {
											columnValuetFileInputPositional_1[32]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[32]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[32])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[32]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[32] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[32] = columnValuetFileInputPositional_1[32].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 33) {
											columnValuetFileInputPositional_1[33]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[33]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[33])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[33]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[33] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[33] = columnValuetFileInputPositional_1[33].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 34) {
											columnValuetFileInputPositional_1[34]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[34]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[34])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[34]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[34] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[34] = columnValuetFileInputPositional_1[34].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 35) {
											columnValuetFileInputPositional_1[35]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[35]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[35])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[35]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[35] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[35] = columnValuetFileInputPositional_1[35].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 36) {
											columnValuetFileInputPositional_1[36]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[36]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[36])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[36]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[36] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[36] = columnValuetFileInputPositional_1[36].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 37) {
											columnValuetFileInputPositional_1[37]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[37]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[37])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[37]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[37] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[37] = columnValuetFileInputPositional_1[37].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 38) {
											columnValuetFileInputPositional_1[38]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[38]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[38])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[38]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[38] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[38] = columnValuetFileInputPositional_1[38].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 39) {
											columnValuetFileInputPositional_1[39]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[39]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[39])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[39]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[39] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[39] = columnValuetFileInputPositional_1[39].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 40) {
											columnValuetFileInputPositional_1[40]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[40]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[40])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[40]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[40] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[40] = columnValuetFileInputPositional_1[40].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 41) {
											columnValuetFileInputPositional_1[41]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[41]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[41])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[41]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[41] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[41] = columnValuetFileInputPositional_1[41].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 42) {
											columnValuetFileInputPositional_1[42]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[42]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[42])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[42]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[42] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[42] = columnValuetFileInputPositional_1[42].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 43) {
											columnValuetFileInputPositional_1[43]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[43]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[43])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[43]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[43] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[43] = columnValuetFileInputPositional_1[43].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 44) {
											columnValuetFileInputPositional_1[44]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[44]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[44])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[44]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[44] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[44] = columnValuetFileInputPositional_1[44].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 45) {
											columnValuetFileInputPositional_1[45]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[45]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[45])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[45]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[45] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[45] = columnValuetFileInputPositional_1[45].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 46) {
											columnValuetFileInputPositional_1[46]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[46]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[46])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[46]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[46] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[46] = columnValuetFileInputPositional_1[46].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 47) {
											columnValuetFileInputPositional_1[47]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[47]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[47])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[47]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[47] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[47] = columnValuetFileInputPositional_1[47].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 48) {
											columnValuetFileInputPositional_1[48]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[48]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[48])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[48]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[48] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[48] = columnValuetFileInputPositional_1[48].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 49) {
											columnValuetFileInputPositional_1[49]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[49]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[49])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[49]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[49] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[49] = columnValuetFileInputPositional_1[49].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										if(positions_tFileInputPositional_1.length <= 50) {
											columnValuetFileInputPositional_1[50]="";
										} else if(substringBegintFileInputPositional_1 >= rowLen_tFileInputPositional_1){
                            		    	columnValuetFileInputPositional_1[50]= "";
                                		}else{
                                			if("*".equals(positions_tFileInputPositional_1[50])){
        			 							substringEndtFileInputPositional_1=rowLen_tFileInputPositional_1;
            								} else {
                                                    substringEndtFileInputPositional_1 = substringEndtFileInputPositional_1 + Integer.parseInt(positions_tFileInputPositional_1[50]);
                                                    if(substringEndtFileInputPositional_1 > rowLen_tFileInputPositional_1){
                                                        substringEndtFileInputPositional_1 = rowLen_tFileInputPositional_1;
                                                    }
                        				    }
    										
            									columnValuetFileInputPositional_1[50] = row_tFileInputPositional_1.substring(substringBegintFileInputPositional_1, substringEndtFileInputPositional_1);
    										
    											columnValuetFileInputPositional_1[50] = columnValuetFileInputPositional_1[50].trim();
    										    	
            								substringBegintFileInputPositional_1 = substringEndtFileInputPositional_1;
    									}
									
										return substringBegintFileInputPositional_1;
                     				}
								
                                    	void setValue_0(ticketsStruct tickets,String[] columnValuetFileInputPositional_1)throws java.lang.Exception{
                					
									
	                    				tickets.num_ticket = columnValuetFileInputPositional_1[0];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[1].length() > 0) {
						                		
		                        				tickets.sep1 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[1].trim());
											
                        				}else{
        	                				tickets.sep1 = null;
                        				}
									
	
									
									
	                    				tickets.id_date_recu = columnValuetFileInputPositional_1[2];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[3].length() > 0) {
						                		
		                        				tickets.sep2 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[3].trim());
											
                        				}else{
        	                				tickets.sep2 = null;
                        				}
									
	
									
									
	                    				tickets.heure_vente = columnValuetFileInputPositional_1[4];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[5].length() > 0) {
						                		
		                        				tickets.sep3 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[5].trim());
											
                        				}else{
        	                				tickets.sep3 = null;
                        				}
									
	
									
									
	                    				tickets.code_client = columnValuetFileInputPositional_1[6];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[7].length() > 0) {
						                		
		                        				tickets.sep4 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[7].trim());
											
                        				}else{
        	                				tickets.sep4 = null;
                        				}
									
	
									
									
	                    				tickets.code_departement = columnValuetFileInputPositional_1[8];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[9].length() > 0) {
						                		
		                        				tickets.sep5 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[9].trim());
											
                        				}else{
        	                				tickets.sep5 = null;
                        				}
									
	
									
									
	                    				tickets.PLU_Fonction = columnValuetFileInputPositional_1[10];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[11].length() > 0) {
						                		
		                        				tickets.sep6 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[11].trim());
											
                        				}else{
        	                				tickets.sep6 = null;
                        				}
									
	
									
									
	                    				tickets.description = columnValuetFileInputPositional_1[12];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[13].length() > 0) {
						                		
		                        				tickets.sep7 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[13].trim());
											
                        				}else{
        	                				tickets.sep7 = null;
                        				}
									
	
									
									
	                    				if(columnValuetFileInputPositional_1[14].length() > 0) {
						                		
		                        				tickets.quantite = ParserUtils.parseTo_Float(columnValuetFileInputPositional_1[14].trim());
											
                        				}else{
        	                				tickets.quantite = null;
                        				}
									
	
									
									
	                    				if(columnValuetFileInputPositional_1[15].length() > 0) {
						                		
		                        				tickets.sep8 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[15].trim());
											
                        				}else{
        	                				tickets.sep8 = null;
                        				}
									
	
									
									
	                    				if(columnValuetFileInputPositional_1[16].length() > 0) {
						                		
		                        				tickets.prix_vente = ParserUtils.parseTo_Float(columnValuetFileInputPositional_1[16].trim());
											
                        				}else{
        	                				tickets.prix_vente = null;
                        				}
									
	
									
									
	                    				if(columnValuetFileInputPositional_1[17].length() > 0) {
						                		
		                        				tickets.sep9 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[17].trim());
											
                        				}else{
        	                				tickets.sep9 = null;
                        				}
									
	
									
									
	                    				tickets.pos_id = columnValuetFileInputPositional_1[18];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[19].length() > 0) {
						                		
		                        				tickets.sep10 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[19].trim());
											
                        				}else{
        	                				tickets.sep10 = null;
                        				}
									
	
									
									
	                    				tickets.code_caissier = columnValuetFileInputPositional_1[20];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[21].length() > 0) {
						                		
		                        				tickets.sep11 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[21].trim());
											
                        				}else{
        	                				tickets.sep11 = null;
                        				}
									
	
									
									
	                    				tickets.nom_caissier = columnValuetFileInputPositional_1[22];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[23].length() > 0) {
						                		
		                        				tickets.sep12 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[23].trim());
											
                        				}else{
        	                				tickets.sep12 = null;
                        				}
									
	
									
									
	                    				tickets.code_parution = columnValuetFileInputPositional_1[24];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[25].length() > 0) {
						                		
		                        				tickets.sep13 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[25].trim());
											
                        				}else{
        	                				tickets.sep13 = null;
                        				}
									
	
									
									
	                    				tickets.code_tva = columnValuetFileInputPositional_1[26];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[27].length() > 0) {
						                		
		                        				tickets.sep14 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[27].trim());
											
                        				}else{
        	                				tickets.sep14 = null;
                        				}
									
	
									
									
	                    				tickets.num_commande_recu = columnValuetFileInputPositional_1[28];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[29].length() > 0) {
						                		
		                        				tickets.sep15 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[29].trim());
											
                        				}else{
        	                				tickets.sep15 = null;
                        				}
									
	
									
									
	                    				tickets.code_magasin = columnValuetFileInputPositional_1[30];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[31].length() > 0) {
						                		
		                        				tickets.sep16 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[31].trim());
											
                        				}else{
        	                				tickets.sep16 = null;
                        				}
									
	
									
									
	                    				tickets.code_interne = columnValuetFileInputPositional_1[32];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[33].length() > 0) {
						                		
		                        				tickets.sep17 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[33].trim());
											
                        				}else{
        	                				tickets.sep17 = null;
                        				}
									
	
									
									
	                    				tickets.carte_fidelite = columnValuetFileInputPositional_1[34];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[35].length() > 0) {
						                		
		                        				tickets.sep18 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[35].trim());
											
                        				}else{
        	                				tickets.sep18 = null;
                        				}
									
	
									
									
	                    				if(columnValuetFileInputPositional_1[36].length() > 0) {
						                		
		                        				tickets.pourcentage_reduction = ParserUtils.parseTo_Float(columnValuetFileInputPositional_1[36].trim());
											
                        				}else{
        	                				tickets.pourcentage_reduction = null;
                        				}
									
	
									
									
	                    				if(columnValuetFileInputPositional_1[37].length() > 0) {
						                		
		                        				tickets.sep19 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[37].trim());
											
                        				}else{
        	                				tickets.sep19 = null;
                        				}
									
	
									
									
	                    				if(columnValuetFileInputPositional_1[38].length() > 0) {
						                		
		                        				tickets.montant_reduction = ParserUtils.parseTo_Float(columnValuetFileInputPositional_1[38].trim());
											
                        				}else{
        	                				tickets.montant_reduction = null;
                        				}
									
	
									
									
	                    				if(columnValuetFileInputPositional_1[39].length() > 0) {
						                		
		                        				tickets.sep20 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[39].trim());
											
                        				}else{
        	                				tickets.sep20 = null;
                        				}
									
	
									
									
	                    				tickets.function_code = columnValuetFileInputPositional_1[40];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[41].length() > 0) {
						                		
		                        				tickets.sep21 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[41].trim());
											
                        				}else{
        	                				tickets.sep21 = null;
                        				}
									
	
									
									
	                    				tickets.num_ticket_restaurant = columnValuetFileInputPositional_1[42];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[43].length() > 0) {
						                		
		                        				tickets.sep22 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[43].trim());
											
                        				}else{
        	                				tickets.sep22 = null;
                        				}
									
	
									
									
	                    				tickets.niveau_prix = columnValuetFileInputPositional_1[44];
					                
	
									
									
	                    				if(columnValuetFileInputPositional_1[45].length() > 0) {
						                		
		                        				tickets.sep23 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[45].trim());
											
                        				}else{
        	                				tickets.sep23 = null;
                        				}
									
	
									
									
	                    				if(columnValuetFileInputPositional_1[46].length() > 0) {
						                		
		                        				tickets.poids_vendu = ParserUtils.parseTo_Float(columnValuetFileInputPositional_1[46].trim());
											
                        				}else{
        	                				tickets.poids_vendu = null;
                        				}
									
	
									
									
	                    				if(columnValuetFileInputPositional_1[47].length() > 0) {
						                		
		                        				tickets.sep24 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[47].trim());
											
                        				}else{
        	                				tickets.sep24 = null;
                        				}
									
	
									
									
	                    				if(columnValuetFileInputPositional_1[48].length() > 0) {
						                		
		                        				tickets.prix_achat = ParserUtils.parseTo_Float(columnValuetFileInputPositional_1[48].trim());
											
                        				}else{
        	                				tickets.prix_achat = null;
                        				}
									
	
									
									
	                    				if(columnValuetFileInputPositional_1[49].length() > 0) {
						                		
		                        				tickets.sep25 = ParserUtils.parseTo_Character(columnValuetFileInputPositional_1[49].trim());
											
                        				}else{
        	                				tickets.sep25 = null;
                        				}
									
	
									
									
	                    				tickets.gencod = columnValuetFileInputPositional_1[50];
					                
	
									

								
                     				}
								
	
    						
			}

			PositionalUtil_tFileInputPositional_1 positionalUtil_tFileInputPositional_1=new PositionalUtil_tFileInputPositional_1();
			positionalUtil_tFileInputPositional_1.setUseStar(useStar_tFileInputPositional_1);

			
            Object filename_tFileInputPositional_1 = /** Start field tFileInputPositional_1:FILENAME */((String)globalMap.get("tFileList_1_CURRENT_FILEPATH"))/** End field tFileInputPositional_1:FILENAME */;
            java.io.BufferedReader in_tFileInputPositional_1 = null;

            org.talend.fileprocess.delimited.RowParser reader_tFileInputPositional_1 = null; 
            org.talend.fileprocess.delimited.RowParserByByte byteReader_tFileInputPositional_1 = null; 


			

			
                String row_tFileInputPositional_1 = null;
                int rowLen_tFileInputPositional_1 = 0;
                	String[] columnValuetFileInputPositional_1=new String[51]; 
                try {//TD110 begin
                	if(filename_tFileInputPositional_1 instanceof java.io.InputStream){
                		in_tFileInputPositional_1 = 
                				new java.io.BufferedReader(new java.io.InputStreamReader((java.io.InputStream)filename_tFileInputPositional_1, "UTF-8"));
                	}else{
                		in_tFileInputPositional_1 = 
                			new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputPositional_1)), "UTF-8"));
                	}

			
				reader_tFileInputPositional_1 = new org.talend.fileprocess.delimited.RowParser(in_tFileInputPositional_1, "\n", false);
			
				
            		reader_tFileInputPositional_1.setSafetySwitch(true);
            		reader_tFileInputPositional_1.skipHeaders(0);
            	
            if(footer_tFileInputPositional_1 > 0){
            	
            	int available_tFileInputPositional_1 = (int)reader_tFileInputPositional_1.getAvailableRowCount(footer_tFileInputPositional_1);
            	reader_tFileInputPositional_1.close();
            	
            	if(filename_tFileInputPositional_1 instanceof java.io.InputStream){
            		throw new java.lang.RuntimeException("When the input source is a stream,footer shouldn't be bigger than 0.");
            	}else{
            		in_tFileInputPositional_1 = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputPositional_1)), "UTF-8"));
            	}
				
					reader_tFileInputPositional_1 = new org.talend.fileprocess.delimited.RowParser(in_tFileInputPositional_1, "\n", false);
					
                	reader_tFileInputPositional_1.skipHeaders(0);
            	
	
            	if ( nb_limit_tFileInputPositional_1 >= 0 ){
            		nb_limit_tFileInputPositional_1 = ( nb_limit_tFileInputPositional_1 > available_tFileInputPositional_1) ? available_tFileInputPositional_1 : nb_limit_tFileInputPositional_1;
            	}else{
            		nb_limit_tFileInputPositional_1 = available_tFileInputPositional_1;
            	}
			}

		} catch(java.lang.Exception e) {//TD110 end
        	
        		
    			System.err.println(e.getMessage());
        	
        }
                    while (nb_limit_tFileInputPositional_1 != 0 && reader_tFileInputPositional_1!=null && reader_tFileInputPositional_1.readRecord()) {
        	            row_tFileInputPositional_1 = reader_tFileInputPositional_1.getRowRecord();
            	

			
				rowLen_tFileInputPositional_1 = row_tFileInputPositional_1.length();
			
			
    						tickets = null;			
						
        			
            			boolean whetherReject_tFileInputPositional_1 = false;
            			tickets = new ticketsStruct();
            			try {
    			
    						
                            	int substringBegintFileInputPositional_1=0,substringEndtFileInputPositional_1=0;
                            	int[]begin_end_tFileInputPositional_1=new int[2];
                            	
        						
                        				substringBegintFileInputPositional_1 = positionalUtil_tFileInputPositional_1.parseValue_0(row_tFileInputPositional_1, substringBegintFileInputPositional_1, substringEndtFileInputPositional_1, rowLen_tFileInputPositional_1, columnValuetFileInputPositional_1 );
                        				substringEndtFileInputPositional_1 = substringBegintFileInputPositional_1;
                    				
      	 								positionalUtil_tFileInputPositional_1.setValue_0(tickets,columnValuetFileInputPositional_1);
    								
    		
    						        			
            			
    					} catch (java.lang.Exception e) {
        					whetherReject_tFileInputPositional_1 = true;
                                    System.err.println(e.getMessage());
                                    tickets = null;
                        }
        			
        			
							
					

 



/**
 * [tFileInputPositional_1 begin ] stop
 */
	
	/**
	 * [tFileInputPositional_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputPositional_1";

	

 


	tos_count_tFileInputPositional_1++;

/**
 * [tFileInputPositional_1 main ] stop
 */
	
	/**
	 * [tFileInputPositional_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputPositional_1";

	

 



/**
 * [tFileInputPositional_1 process_data_begin ] stop
 */
// Start of branch "tickets"
if(tickets != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

			//tickets
			//tickets


			
				
				if(execStat){
					runStat.updateStatOnConnection("tickets"+iterateId,1, 1);
				}
				
				
				
			

		

          row2 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((tickets.code_departement == null? false : tickets.code_departement.compareTo("00") != 0)
                           , "code_departement.compareTo(\"00\") != 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row2 == null){ 
                row2 = new row2Struct();
              }
               row2.num_ticket = tickets.num_ticket;
               row2.sep1 = tickets.sep1;
               row2.id_date_recu = tickets.id_date_recu;
               row2.sep2 = tickets.sep2;
               row2.heure_vente = tickets.heure_vente;
               row2.sep3 = tickets.sep3;
               row2.code_client = tickets.code_client;
               row2.sep4 = tickets.sep4;
               row2.code_departement = tickets.code_departement;
               row2.sep5 = tickets.sep5;
               row2.PLU_Fonction = tickets.PLU_Fonction;
               row2.sep6 = tickets.sep6;
               row2.description = tickets.description;
               row2.sep7 = tickets.sep7;
               row2.quantite = tickets.quantite;
               row2.sep8 = tickets.sep8;
               row2.prix_vente = tickets.prix_vente;
               row2.sep9 = tickets.sep9;
               row2.pos_id = tickets.pos_id;
               row2.sep10 = tickets.sep10;
               row2.code_caissier = tickets.code_caissier;
               row2.sep11 = tickets.sep11;
               row2.nom_caissier = tickets.nom_caissier;
               row2.sep12 = tickets.sep12;
               row2.code_parution = tickets.code_parution;
               row2.sep13 = tickets.sep13;
               row2.code_tva = tickets.code_tva;
               row2.sep14 = tickets.sep14;
               row2.num_commande_recu = tickets.num_commande_recu;
               row2.sep15 = tickets.sep15;
               row2.code_magasin = tickets.code_magasin;
               row2.sep16 = tickets.sep16;
               row2.code_interne = tickets.code_interne;
               row2.sep17 = tickets.sep17;
               row2.carte_fidelite = tickets.carte_fidelite;
               row2.sep18 = tickets.sep18;
               row2.pourcentage_reduction = tickets.pourcentage_reduction;
               row2.sep19 = tickets.sep19;
               row2.montant_reduction = tickets.montant_reduction;
               row2.sep20 = tickets.sep20;
               row2.function_code = tickets.function_code;
               row2.sep21 = tickets.sep21;
               row2.num_ticket_restaurant = tickets.num_ticket_restaurant;
               row2.sep22 = tickets.sep22;
               row2.niveau_prix = tickets.niveau_prix;
               row2.sep23 = tickets.sep23;
               row2.poids_vendu = tickets.poids_vendu;
               row2.sep24 = tickets.sep24;
               row2.prix_achat = tickets.prix_achat;
               row2.sep25 = tickets.sep25;
               row2.gencod = tickets.gencod;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row2
			//row2


			
				
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

def_cod_mag = null;


// # Output table : 'def_cod_mag'
def_cod_mag_tmp.num_ticket = row2.num_ticket ;
def_cod_mag_tmp.id_date_recu = row2.id_date_recu ;
def_cod_mag_tmp.heure_vente = row2.heure_vente ;
def_cod_mag_tmp.code_client = row2.code_client ;
def_cod_mag_tmp.code_departement = row2.code_departement ;
def_cod_mag_tmp.PLU_Fonction = row2.PLU_Fonction ;
def_cod_mag_tmp.description = row2.description ;
def_cod_mag_tmp.quantite = row2.quantite ;
def_cod_mag_tmp.prix_vente = row2.prix_vente ;
def_cod_mag_tmp.pos_id = row2.pos_id ;
def_cod_mag_tmp.code_caissier = row2.code_caissier ;
def_cod_mag_tmp.nom_caissier = row2.nom_caissier ;
def_cod_mag_tmp.code_parution = row2.code_parution ;
def_cod_mag_tmp.code_tva = row2.code_tva ;
def_cod_mag_tmp.num_commande_recu = row2.num_commande_recu ;
def_cod_mag_tmp.code_magasin = StringHandling.RIGHT(StringHandling.LEFT(((String)globalMap.get("tFileList_1_CURRENT_FILE")),14),4) ;
def_cod_mag_tmp.code_interne = row2.code_interne ;
def_cod_mag_tmp.carte_fidelite = row2.carte_fidelite ;
def_cod_mag_tmp.pourcentage_reduction = row2.pourcentage_reduction ;
def_cod_mag_tmp.montant_reduction = row2.montant_reduction ;
def_cod_mag_tmp.function_code = row2.function_code ;
def_cod_mag_tmp.num_ticket_restaurant = row2.num_ticket_restaurant ;
def_cod_mag_tmp.niveau_prix = row2.niveau_prix ;
def_cod_mag_tmp.poids_vendu = row2.poids_vendu ;
def_cod_mag_tmp.prix_achat = row2.prix_achat ;
def_cod_mag_tmp.gencod = row2.gencod ;
def_cod_mag = def_cod_mag_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "def_cod_mag"
if(def_cod_mag != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//def_cod_mag
			//def_cod_mag


			
				
				if(execStat){
					runStat.updateStatOnConnection("def_cod_mag"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "magasins" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopmagasins = false;
       		  	    	
       		  	    	
 							magasinsStruct magasinsObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		magasinsHashKey.code_etablissement = def_cod_mag.code_magasin ;
                        		    		

								
		                        	magasinsHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_magasins.lookup( magasinsHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_magasins.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_magasins != null && tHash_Lookup_magasins.getCount(magasinsHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'magasins' and it contains more one result from keys :  magasins.code_etablissement = '" + magasinsHashKey.code_etablissement + "'");
								} // G 071
							

							magasinsStruct magasins = null;
                    		  	 
							   
                    		  	 
	       		  	    	magasinsStruct fromLookup_magasins = null;
							magasins = magasinsDefault;
										 
							
								 
							
							
								if (tHash_Lookup_magasins !=null && tHash_Lookup_magasins.hasNext()) { // G 099
								
							
								
								fromLookup_magasins = tHash_Lookup_magasins.next();

							
							
								} // G 099
							
							

							if(fromLookup_magasins != null) {
								magasins = fromLookup_magasins;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

cle_mag_verifie = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'cle_mag_verifie'
cle_mag_verifie_tmp.num_ticket = tickets.num_ticket ;
cle_mag_verifie_tmp.id_date_recu = tickets.id_date_recu ;
cle_mag_verifie_tmp.heure_vente = tickets.heure_vente ;
cle_mag_verifie_tmp.code_client = tickets.code_client ;
cle_mag_verifie_tmp.code_departement = tickets.code_departement ;
cle_mag_verifie_tmp.PLU_Fonction = tickets.PLU_Fonction ;
cle_mag_verifie_tmp.description = tickets.description ;
cle_mag_verifie_tmp.quantite = tickets.quantite ;
cle_mag_verifie_tmp.prix_vente = tickets.prix_vente ;
cle_mag_verifie_tmp.pos_id = tickets.pos_id ;
cle_mag_verifie_tmp.code_caissier = tickets.code_caissier ;
cle_mag_verifie_tmp.nom_caissier = tickets.nom_caissier ;
cle_mag_verifie_tmp.code_parution = tickets.code_parution ;
cle_mag_verifie_tmp.code_tva = tickets.code_tva ;
cle_mag_verifie_tmp.num_commande_recu = tickets.num_commande_recu ;
cle_mag_verifie_tmp.code_magasin = tickets.code_magasin ;
cle_mag_verifie_tmp.code_interne = tickets.code_interne ;
cle_mag_verifie_tmp.carte_fidelite = tickets.carte_fidelite ;
cle_mag_verifie_tmp.pourcentage_reduction = tickets.pourcentage_reduction ;
cle_mag_verifie_tmp.sep19 = tickets.sep19 ;
cle_mag_verifie_tmp.montant_reduction = tickets.montant_reduction ;
cle_mag_verifie_tmp.function_code = tickets.function_code ;
cle_mag_verifie_tmp.num_ticket_restaurant = tickets.num_ticket_restaurant ;
cle_mag_verifie_tmp.niveau_prix = tickets.niveau_prix ;
cle_mag_verifie_tmp.poids_vendu = tickets.poids_vendu ;
cle_mag_verifie_tmp.prix_achat = tickets.prix_achat ;
cle_mag_verifie_tmp.gencod = tickets.gencod ;
cle_mag_verifie = cle_mag_verifie_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "cle_mag_verifie"
if(cle_mag_verifie != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//cle_mag_verifie
			//cle_mag_verifie


			
				
				if(execStat){
					runStat.updateStatOnConnection("cle_mag_verifie"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "article" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooparticle = false;
       		  	    	
       		  	    	
 							articleStruct articleObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		articleHashKey.ref_produit = cle_mag_verifie.PLU_Fonction ;
                        		    		

								
		                        	articleHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_article.lookup( articleHashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_article != null && tHash_Lookup_article.getCount(articleHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'article' and it contains more one result from keys :  article.ref_produit = '" + articleHashKey.ref_produit + "'");
								} // G 071
							

							articleStruct article = null;
                    		  	 
							   
                    		  	 
	       		  	    	articleStruct fromLookup_article = null;
							article = articleDefault;
										 
							
								 
							
							
								if (tHash_Lookup_article !=null && tHash_Lookup_article.hasNext()) { // G 099
								
							
								
								fromLookup_article = tHash_Lookup_article.next();

							
							
								} // G 099
							
							

							if(fromLookup_article != null) {
								article = fromLookup_article;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.var1 = null;// ###############################
        // ###############################
        // # Output tables

cle_art_verifie = null;


// # Output table : 'cle_art_verifie'
cle_art_verifie_tmp.num_ticket = cle_mag_verifie.num_ticket ;
cle_art_verifie_tmp.id_date_recu = cle_mag_verifie.id_date_recu ;
cle_art_verifie_tmp.heure_vente = cle_mag_verifie.heure_vente ;
cle_art_verifie_tmp.code_client = cle_mag_verifie.code_client ;
cle_art_verifie_tmp.code_departement = cle_mag_verifie.code_departement ;
cle_art_verifie_tmp.PLU_Fonction = cle_mag_verifie.PLU_Fonction ;
cle_art_verifie_tmp.description = cle_mag_verifie.description ;
cle_art_verifie_tmp.quantite = cle_mag_verifie.quantite ;
cle_art_verifie_tmp.prix_vente = cle_mag_verifie.prix_vente ;
cle_art_verifie_tmp.pos_id = cle_mag_verifie.pos_id ;
cle_art_verifie_tmp.code_caissier = cle_mag_verifie.code_caissier ;
cle_art_verifie_tmp.nom_caissier = cle_mag_verifie.nom_caissier ;
cle_art_verifie_tmp.code_parution = cle_mag_verifie.code_parution ;
cle_art_verifie_tmp.code_tva = cle_mag_verifie.code_tva ;
cle_art_verifie_tmp.num_commande_recu = cle_mag_verifie.num_commande_recu ;
cle_art_verifie_tmp.code_magasin = cle_mag_verifie.code_magasin ;
cle_art_verifie_tmp.code_interne = cle_mag_verifie.code_interne ;
cle_art_verifie_tmp.carte_fidelite = cle_mag_verifie.carte_fidelite ;
cle_art_verifie_tmp.pourcentage_reduction = cle_mag_verifie.pourcentage_reduction ;
cle_art_verifie_tmp.sep19 = cle_mag_verifie.sep19 ;
cle_art_verifie_tmp.montant_reduction = cle_mag_verifie.montant_reduction ;
cle_art_verifie_tmp.function_code = cle_mag_verifie.function_code ;
cle_art_verifie_tmp.num_ticket_restaurant = cle_mag_verifie.num_ticket_restaurant ;
cle_art_verifie_tmp.niveau_prix = cle_mag_verifie.niveau_prix ;
cle_art_verifie_tmp.poids_vendu = cle_mag_verifie.poids_vendu ;
cle_art_verifie_tmp.prix_achat = cle_mag_verifie.prix_achat ;
cle_art_verifie_tmp.gencod = cle_mag_verifie.gencod ;
cle_art_verifie = cle_art_verifie_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "cle_art_verifie"
if(cle_art_verifie != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//cle_art_verifie
			//cle_art_verifie


			
				
				if(execStat){
					runStat.updateStatOnConnection("cle_art_verifie"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "temps" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooptemps = false;
       		  	    	
       		  	    	
 							tempsStruct tempsObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		tempsHashKey.id_date = cle_art_verifie.id_date_recu ;
                        		    		

								
		                        	tempsHashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_temps.lookup( tempsHashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_temps.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_temps != null && tHash_Lookup_temps.getCount(tempsHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'temps' and it contains more one result from keys :  temps.id_date = '" + tempsHashKey.id_date + "'");
								} // G 071
							

							tempsStruct temps = null;
                    		  	 
							   
                    		  	 
	       		  	    	tempsStruct fromLookup_temps = null;
							temps = tempsDefault;
										 
							
								 
							
							
								if (tHash_Lookup_temps !=null && tHash_Lookup_temps.hasNext()) { // G 099
								
							
								
								fromLookup_temps = tHash_Lookup_temps.next();

							
							
								} // G 099
							
							

							if(fromLookup_temps != null) {
								temps = fromLookup_temps;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.var1 = null;// ###############################
        // ###############################
        // # Output tables

fait_ventes = null;

if(!rejectedInnerJoin_tMap_3 ) {

// # Output table : 'fait_ventes'
fait_ventes_tmp.id_vente = cle_art_verifie.num_ticket + cle_art_verifie.id_date_recu + cle_art_verifie.code_magasin + cle_art_verifie.gencod ;
fait_ventes_tmp.num_ticket = cle_art_verifie.num_ticket ;
fait_ventes_tmp.id_date_vente = cle_art_verifie.id_date_recu ;
fait_ventes_tmp.ref_produit = cle_art_verifie.PLU_Fonction ;
fait_ventes_tmp.code_magasin = cle_art_verifie.code_magasin ;
fait_ventes_tmp.heure_vente = cle_art_verifie.heure_vente ;
fait_ventes_tmp.department_code = cle_art_verifie.code_departement ;
fait_ventes_tmp.description = cle_art_verifie.description ;
fait_ventes_tmp.code_tva = cle_art_verifie.code_tva ;
fait_ventes_tmp.prix_achat = cle_art_verifie.prix_achat ;
fait_ventes_tmp.quantite = cle_art_verifie.quantite ;
fait_ventes_tmp.prix_vente = cle_art_verifie.prix_vente ;
fait_ventes = fait_ventes_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "fait_ventes"
if(fait_ventes != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//fait_ventes
			//fait_ventes


			
				
				if(execStat){
					runStat.updateStatOnConnection("fait_ventes"+iterateId,1, 1);
				}
				
				
				
			

		



            row1 = null;
        whetherReject_tDBOutput_1 = false;
                    if(fait_ventes.id_vente == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(1, fait_ventes.id_vente);
}

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        if(fait_ventes.num_ticket == null) {
pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(1, fait_ventes.num_ticket);
}

                        if(fait_ventes.id_date_vente == null) {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(2, fait_ventes.id_date_vente);
}

                        if(fait_ventes.ref_produit == null) {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(3, fait_ventes.ref_produit);
}

                        if(fait_ventes.code_magasin == null) {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(4, fait_ventes.code_magasin);
}

                        if(fait_ventes.heure_vente == null) {
pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(5, fait_ventes.heure_vente);
}

                        if(fait_ventes.department_code == null) {
pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(6, fait_ventes.department_code);
}

                        if(fait_ventes.description == null) {
pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(7, fait_ventes.description);
}

                        if(fait_ventes.code_tva == null) {
pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(8, fait_ventes.code_tva);
}

                        if(fait_ventes.prix_achat == null) {
pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.FLOAT);
} else {pstmtUpdate_tDBOutput_1.setFloat(9, fait_ventes.prix_achat);
}

                        if(fait_ventes.quantite == null) {
pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.FLOAT);
} else {pstmtUpdate_tDBOutput_1.setFloat(10, fait_ventes.quantite);
}

                        if(fait_ventes.prix_vente == null) {
pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.FLOAT);
} else {pstmtUpdate_tDBOutput_1.setFloat(11, fait_ventes.prix_vente);
}

                        if(fait_ventes.id_vente == null) {
pstmtUpdate_tDBOutput_1.setNull(12 + count_tDBOutput_1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(12 + count_tDBOutput_1, fait_ventes.id_vente);
}

                try {
                    updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + pstmtUpdate_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            } else {
                        if(fait_ventes.id_vente == null) {
pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(1, fait_ventes.id_vente);
}

                        if(fait_ventes.num_ticket == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(2, fait_ventes.num_ticket);
}

                        if(fait_ventes.id_date_vente == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(3, fait_ventes.id_date_vente);
}

                        if(fait_ventes.ref_produit == null) {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(4, fait_ventes.ref_produit);
}

                        if(fait_ventes.code_magasin == null) {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(5, fait_ventes.code_magasin);
}

                        if(fait_ventes.heure_vente == null) {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(6, fait_ventes.heure_vente);
}

                        if(fait_ventes.department_code == null) {
pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(7, fait_ventes.department_code);
}

                        if(fait_ventes.description == null) {
pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(8, fait_ventes.description);
}

                        if(fait_ventes.code_tva == null) {
pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(9, fait_ventes.code_tva);
}

                        if(fait_ventes.prix_achat == null) {
pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.FLOAT);
} else {pstmtInsert_tDBOutput_1.setFloat(10, fait_ventes.prix_achat);
}

                        if(fait_ventes.quantite == null) {
pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.FLOAT);
} else {pstmtInsert_tDBOutput_1.setFloat(11, fait_ventes.quantite);
}

                        if(fait_ventes.prix_vente == null) {
pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.FLOAT);
} else {pstmtInsert_tDBOutput_1.setFloat(12, fait_ventes.prix_vente);
}

                try {
                    insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                    nb_line_tDBOutput_1++;
                } catch(java.lang.Exception e) {
                    whetherReject_tDBOutput_1 = true;
                        nb_line_tDBOutput_1++;
                            System.err.print(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_1) {
                            row1 = new row1Struct();
                                row1.id_vente = fait_ventes.id_vente;
                                row1.num_ticket = fait_ventes.num_ticket;
                                row1.id_date_vente = fait_ventes.id_date_vente;
                                row1.ref_produit = fait_ventes.ref_produit;
                                row1.code_magasin = fait_ventes.code_magasin;
                                row1.heure_vente = fait_ventes.heure_vente;
                                row1.department_code = fait_ventes.department_code;
                                row1.description = fait_ventes.description;
                                row1.code_tva = fait_ventes.code_tva;
                                row1.prix_achat = fait_ventes.prix_achat;
                                row1.quantite = fait_ventes.quantite;
                                row1.prix_vente = fait_ventes.prix_vente;
            }
                commitCounter_tDBOutput_1++;

                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                    conn_tDBOutput_1.commit();
                    commitCounter_tDBOutput_1=0;

                }


 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//row1
			//row1


			
				
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row1.id_vente != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row1.id_vente)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row1.num_ticket != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row1.num_ticket)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row1.id_date_vente != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row1.id_date_vente)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row1.ref_produit != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row1.ref_produit)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row1.code_magasin != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row1.code_magasin)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row1.heure_vente != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row1.heure_vente)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row1.department_code != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row1.department_code)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row1.description != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row1.description)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row1.code_tva != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row1.code_tva)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row1.prix_achat != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.formatUnwithE(row1.prix_achat)				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row1.quantite != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.formatUnwithE(row1.quantite)				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row1.prix_vente != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.formatUnwithE(row1.prix_vente)				
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "fait_ventes"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "cle_art_verifie"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "cle_mag_verifie"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "def_cod_mag"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "tickets"




	
	/**
	 * [tFileInputPositional_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputPositional_1";

	

 



/**
 * [tFileInputPositional_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputPositional_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputPositional_1";

	
		nb_line_tFileInputPositional_1++;
	if ( nb_limit_tFileInputPositional_1 > 0 && nb_line_tFileInputPositional_1 >= nb_limit_tFileInputPositional_1 ){
		break;
	}
}
			

			
			
if(!(filename_tFileInputPositional_1 instanceof java.io.InputStream)){

	if(reader_tFileInputPositional_1!=null) {
		reader_tFileInputPositional_1.close();
	}

	if(byteReader_tFileInputPositional_1!=null) {
		byteReader_tFileInputPositional_1.close();
	}
}
globalMap.put("tFileInputPositional_1_NB_LINE",nb_line_tFileInputPositional_1);      

 

ok_Hash.put("tFileInputPositional_1", true);
end_Hash.put("tFileInputPositional_1", System.currentTimeMillis());




/**
 * [tFileInputPositional_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("tickets"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row2"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("def_cod_mag"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("cle_mag_verifie"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("cle_art_verifie"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
    	if (commitCounter_tDBOutput_1 > 0) {
    		
    		conn_tDBOutput_1.commit();
    		
    	}
    		
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("fait_ventes"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row1"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */





















						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFileInputPositional_1);
						}				
					




	
	/**
	 * [tFileList_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 process_data_end ] stop
 */
	
	/**
	 * [tFileList_1 end ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

  
    }
  globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);
  

    if (NB_FILEtFileList_1 == 0) throw new RuntimeException("No file found in directory " + directory_tFileList_1);
  
 

 

ok_Hash.put("tFileList_1", true);
end_Hash.put("tFileList_1", System.currentTimeMillis());




/**
 * [tFileList_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileList_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBCommit_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_temps"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_article"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_magasins"); 
				     			
				try{
					
	
	/**
	 * [tFileList_1 finally ] start
	 */

	

	
	
	currentComponent="tFileList_1";

	

 



/**
 * [tFileList_1 finally ] stop
 */

	
	/**
	 * [tFileInputPositional_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputPositional_1";

	

 



/**
 * [tFileInputPositional_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */
























				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";

	
		int tos_count_tDBCommit_1 = 0;
		

 



/**
 * [tDBCommit_1 begin ] stop
 */
	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");

if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {
	
		try{
	
			
			conn_tDBCommit_1.commit();
			
	
		}finally{
			
			conn_tDBCommit_1.close();
			
	    }
	
}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */
	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());




/**
 * [tDBCommit_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}
	


public static class magasinsStruct implements routines.system.IPersistableComparableLookupRow<magasinsStruct> {
    final static byte[] commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
    static byte[] commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String code_etablissement;

				public String getCode_etablissement () {
					return this.code_etablissement;
				}
				
			    public String adresse;

				public String getAdresse () {
					return this.adresse;
				}
				
			    public String code_postal;

				public String getCode_postal () {
					return this.code_postal;
				}
				
			    public String ville;

				public String getVille () {
					return this.ville;
				}
				
			    public String num_mistral;

				public String getNum_mistral () {
					return this.num_mistral;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.code_etablissement == null) ? 0 : this.code_etablissement.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final magasinsStruct other = (magasinsStruct) obj;
		
						if (this.code_etablissement == null) {
							if (other.code_etablissement != null)
								return false;
						
						} else if (!this.code_etablissement.equals(other.code_etablissement))
						
							return false;
					

		return true;
    }

	public void copyDataTo(magasinsStruct other) {

		other.code_etablissement = this.code_etablissement;
	            other.adresse = this.adresse;
	            other.code_postal = this.code_postal;
	            other.ville = this.ville;
	            other.num_mistral = this.num_mistral;
	            
	}

	public void copyKeysDataTo(magasinsStruct other) {

		other.code_etablissement = this.code_etablissement;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length) {
				if(length < 1024 && commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length == 0) {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[1024];
				} else {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length);
			strReturn = new String(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes) {

        	try {

        		int length = 0;
		
					this.code_etablissement = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.code_etablissement,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.adresse = readString(dis,ois);
					
						this.code_postal = readString(dis,ois);
					
						this.ville = readString(dis,ois);
					
						this.num_mistral = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.adresse, dos, oos);
					
						writeString(this.code_postal, dos, oos);
					
						writeString(this.ville, dos, oos);
					
						writeString(this.num_mistral, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("code_etablissement="+code_etablissement);
		sb.append(",adresse="+adresse);
		sb.append(",code_postal="+code_postal);
		sb.append(",ville="+ville);
		sb.append(",num_mistral="+num_mistral);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(magasinsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.code_etablissement, other.code_etablissement);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		magasinsStruct magasins = new magasinsStruct();




	
	/**
	 * [tAdvancedHash_magasins begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_magasins", false);
		start_Hash.put("tAdvancedHash_magasins", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_magasins";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("magasins"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_magasins = 0;
		

			   		// connection name:magasins
			   		// source node:tDBInput_1 - inputs:(after_tFileList_1) outputs:(magasins,magasins) | target node:tAdvancedHash_magasins - inputs:(magasins) outputs:()
			   		// linked node: tMap_1 - inputs:(def_cod_mag,magasins) outputs:(cle_mag_verifie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_magasins = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<magasinsStruct> tHash_Lookup_magasins =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<magasinsStruct>getLookup(matchingModeEnum_magasins);
	   						   
		   	   	   globalMap.put("tHash_Lookup_magasins", tHash_Lookup_magasins);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_magasins begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
		        conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  `magasin`.`code_etablissement`, \n  `magasin`.`adresse`, \n  `magasin`.`code_postal`, \n  `magasin`.`ville`, \n  "
+"`magasin`.`num_mistral`\nFROM `magasin`";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								magasins.code_etablissement = null;
							} else {
	                         		
        	magasins.code_etablissement = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								magasins.adresse = null;
							} else {
	                         		
        	magasins.adresse = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								magasins.code_postal = null;
							} else {
	                         		
        	magasins.code_postal = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								magasins.ville = null;
							} else {
	                         		
        	magasins.ville = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								magasins.num_mistral = null;
							} else {
	                         		
        	magasins.num_mistral = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_magasins main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_magasins";

	

			//magasins
			//magasins


			
				
				if(execStat){
					runStat.updateStatOnConnection("magasins"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					magasinsStruct magasins_HashRow = new magasinsStruct();
		   	   	   
				
				magasins_HashRow.code_etablissement = magasins.code_etablissement;
				
				magasins_HashRow.adresse = magasins.adresse;
				
				magasins_HashRow.code_postal = magasins.code_postal;
				
				magasins_HashRow.ville = magasins.ville;
				
				magasins_HashRow.num_mistral = magasins.num_mistral;
				
			tHash_Lookup_magasins.put(magasins_HashRow);
			
            




 


	tos_count_tAdvancedHash_magasins++;

/**
 * [tAdvancedHash_magasins main ] stop
 */
	
	/**
	 * [tAdvancedHash_magasins process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_magasins";

	

 



/**
 * [tAdvancedHash_magasins process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_magasins process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_magasins";

	

 



/**
 * [tAdvancedHash_magasins process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_magasins end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_magasins";

	

tHash_Lookup_magasins.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("magasins"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_magasins", true);
end_Hash.put("tAdvancedHash_magasins", System.currentTimeMillis());




/**
 * [tAdvancedHash_magasins end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_magasins finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_magasins";

	

 



/**
 * [tAdvancedHash_magasins finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class articleStruct implements routines.system.IPersistableComparableLookupRow<articleStruct> {
    final static byte[] commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
    static byte[] commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String ref_produit;

				public String getRef_produit () {
					return this.ref_produit;
				}
				
			    public String nom_long;

				public String getNom_long () {
					return this.nom_long;
				}
				
			    public String nom_court;

				public String getNom_court () {
					return this.nom_court;
				}
				
			    public String sous_famille_distri_code;

				public String getSous_famille_distri_code () {
					return this.sous_famille_distri_code;
				}
				
			    public String famille_distri_code;

				public String getFamille_distri_code () {
					return this.famille_distri_code;
				}
				
			    public String categorie_code;

				public String getCategorie_code () {
					return this.categorie_code;
				}
				
			    public String nomenclature;

				public String getNomenclature () {
					return this.nomenclature;
				}
				
			    public String nomenclature_alternative;

				public String getNomenclature_alternative () {
					return this.nomenclature_alternative;
				}
				
			    public String code_tva;

				public String getCode_tva () {
					return this.code_tva;
				}
				
			    public Double prix_achat;

				public Double getPrix_achat () {
					return this.prix_achat;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ref_produit == null) ? 0 : this.ref_produit.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final articleStruct other = (articleStruct) obj;
		
						if (this.ref_produit == null) {
							if (other.ref_produit != null)
								return false;
						
						} else if (!this.ref_produit.equals(other.ref_produit))
						
							return false;
					

		return true;
    }

	public void copyDataTo(articleStruct other) {

		other.ref_produit = this.ref_produit;
	            other.nom_long = this.nom_long;
	            other.nom_court = this.nom_court;
	            other.sous_famille_distri_code = this.sous_famille_distri_code;
	            other.famille_distri_code = this.famille_distri_code;
	            other.categorie_code = this.categorie_code;
	            other.nomenclature = this.nomenclature;
	            other.nomenclature_alternative = this.nomenclature_alternative;
	            other.code_tva = this.code_tva;
	            other.prix_achat = this.prix_achat;
	            
	}

	public void copyKeysDataTo(articleStruct other) {

		other.ref_produit = this.ref_produit;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length) {
				if(length < 1024 && commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length == 0) {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[1024];
				} else {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length);
			strReturn = new String(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes) {

        	try {

        		int length = 0;
		
					this.ref_produit = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.ref_produit,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nom_long = readString(dis,ois);
					
						this.nom_court = readString(dis,ois);
					
						this.sous_famille_distri_code = readString(dis,ois);
					
						this.famille_distri_code = readString(dis,ois);
					
						this.categorie_code = readString(dis,ois);
					
						this.nomenclature = readString(dis,ois);
					
						this.nomenclature_alternative = readString(dis,ois);
					
						this.code_tva = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.prix_achat = null;
           				} else {
           			    	this.prix_achat = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nom_long, dos, oos);
					
						writeString(this.nom_court, dos, oos);
					
						writeString(this.sous_famille_distri_code, dos, oos);
					
						writeString(this.famille_distri_code, dos, oos);
					
						writeString(this.categorie_code, dos, oos);
					
						writeString(this.nomenclature, dos, oos);
					
						writeString(this.nomenclature_alternative, dos, oos);
					
						writeString(this.code_tva, dos, oos);
					
						if(this.prix_achat == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.prix_achat);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ref_produit="+ref_produit);
		sb.append(",nom_long="+nom_long);
		sb.append(",nom_court="+nom_court);
		sb.append(",sous_famille_distri_code="+sous_famille_distri_code);
		sb.append(",famille_distri_code="+famille_distri_code);
		sb.append(",categorie_code="+categorie_code);
		sb.append(",nomenclature="+nomenclature);
		sb.append(",nomenclature_alternative="+nomenclature_alternative);
		sb.append(",code_tva="+code_tva);
		sb.append(",prix_achat="+String.valueOf(prix_achat));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(articleStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ref_produit, other.ref_produit);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		articleStruct article = new articleStruct();




	
	/**
	 * [tAdvancedHash_article begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_article", false);
		start_Hash.put("tAdvancedHash_article", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_article";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("article"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_article = 0;
		

			   		// connection name:article
			   		// source node:tDBInput_2 - inputs:(after_tFileList_1) outputs:(article,article) | target node:tAdvancedHash_article - inputs:(article) outputs:()
			   		// linked node: tMap_2 - inputs:(cle_mag_verifie,article) outputs:(cle_art_verifie)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_article = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<articleStruct> tHash_Lookup_article =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<articleStruct>getLookup(matchingModeEnum_article);
	   						   
		   	   	   globalMap.put("tHash_Lookup_article", tHash_Lookup_article);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_article begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
		        conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  `article`.`ref_produit`, \n  `article`.`nom_long`, \n  `article`.`nom_court`, \n  `article`.`sous_famille_distri"
+"_code`, \n  `article`.`famille_distri_code`, \n  `article`.`categorie_code`, \n  `article`.`nomenclature`, \n  `article`.`no"
+"menclature_alternative`, \n  `article`.`code_tva`, \n  `article`.`prix_achat`\nFROM `article`";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								article.ref_produit = null;
							} else {
	                         		
        	article.ref_produit = routines.system.JDBCUtil.getString(rs_tDBInput_2, 1, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								article.nom_long = null;
							} else {
	                         		
        	article.nom_long = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								article.nom_court = null;
							} else {
	                         		
        	article.nom_court = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								article.sous_famille_distri_code = null;
							} else {
	                         		
        	article.sous_famille_distri_code = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								article.famille_distri_code = null;
							} else {
	                         		
        	article.famille_distri_code = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								article.categorie_code = null;
							} else {
	                         		
        	article.categorie_code = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								article.nomenclature = null;
							} else {
	                         		
        	article.nomenclature = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								article.nomenclature_alternative = null;
							} else {
	                         		
        	article.nomenclature_alternative = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								article.code_tva = null;
							} else {
	                         		
        	article.code_tva = routines.system.JDBCUtil.getString(rs_tDBInput_2, 9, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								article.prix_achat = null;
							} else {
	                         		
            article.prix_achat = rs_tDBInput_2.getDouble(10);
            if(rs_tDBInput_2.wasNull()){
                    article.prix_achat = null;
            }
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_article main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_article";

	

			//article
			//article


			
				
				if(execStat){
					runStat.updateStatOnConnection("article"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					articleStruct article_HashRow = new articleStruct();
		   	   	   
				
				article_HashRow.ref_produit = article.ref_produit;
				
				article_HashRow.nom_long = article.nom_long;
				
				article_HashRow.nom_court = article.nom_court;
				
				article_HashRow.sous_famille_distri_code = article.sous_famille_distri_code;
				
				article_HashRow.famille_distri_code = article.famille_distri_code;
				
				article_HashRow.categorie_code = article.categorie_code;
				
				article_HashRow.nomenclature = article.nomenclature;
				
				article_HashRow.nomenclature_alternative = article.nomenclature_alternative;
				
				article_HashRow.code_tva = article.code_tva;
				
				article_HashRow.prix_achat = article.prix_achat;
				
			tHash_Lookup_article.put(article_HashRow);
			
            




 


	tos_count_tAdvancedHash_article++;

/**
 * [tAdvancedHash_article main ] stop
 */
	
	/**
	 * [tAdvancedHash_article process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_article";

	

 



/**
 * [tAdvancedHash_article process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_article process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_article";

	

 



/**
 * [tAdvancedHash_article process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}

		   globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
		


 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_article end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_article";

	

tHash_Lookup_article.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("article"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_article", true);
end_Hash.put("tAdvancedHash_article", System.currentTimeMillis());




/**
 * [tAdvancedHash_article end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_article finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_article";

	

 



/**
 * [tAdvancedHash_article finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class tempsStruct implements routines.system.IPersistableComparableLookupRow<tempsStruct> {
    final static byte[] commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
    static byte[] commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public java.util.Date lb_date;

				public java.util.Date getLb_date () {
					return this.lb_date;
				}
				
			    public String id_date;

				public String getId_date () {
					return this.id_date;
				}
				
			    public String jour;

				public String getJour () {
					return this.jour;
				}
				
			    public String code_mois;

				public String getCode_mois () {
					return this.code_mois;
				}
				
			    public String mois;

				public String getMois () {
					return this.mois;
				}
				
			    public String trimestre;

				public String getTrimestre () {
					return this.trimestre;
				}
				
			    public String semestre;

				public String getSemestre () {
					return this.semestre;
				}
				
			    public java.util.Date annee;

				public java.util.Date getAnnee () {
					return this.annee;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.id_date == null) ? 0 : this.id_date.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final tempsStruct other = (tempsStruct) obj;
		
						if (this.id_date == null) {
							if (other.id_date != null)
								return false;
						
						} else if (!this.id_date.equals(other.id_date))
						
							return false;
					

		return true;
    }

	public void copyDataTo(tempsStruct other) {

		other.lb_date = this.lb_date;
	            other.id_date = this.id_date;
	            other.jour = this.jour;
	            other.code_mois = this.code_mois;
	            other.mois = this.mois;
	            other.trimestre = this.trimestre;
	            other.semestre = this.semestre;
	            other.annee = this.annee;
	            
	}

	public void copyKeysDataTo(tempsStruct other) {

		other.id_date = this.id_date;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length) {
				if(length < 1024 && commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes.length == 0) {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[1024];
				} else {
   					commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length);
			strReturn = new String(commonByteArray_GRANDE_DISTRIBUTION_FAIT_Ventes, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_GRANDE_DISTRIBUTION_FAIT_Ventes) {

        	try {

        		int length = 0;
		
					this.id_date = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.id_date,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.lb_date = readDate(dis,ois);
					
						this.jour = readString(dis,ois);
					
						this.code_mois = readString(dis,ois);
					
						this.mois = readString(dis,ois);
					
						this.trimestre = readString(dis,ois);
					
						this.semestre = readString(dis,ois);
					
						this.annee = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.lb_date, dos, oos);
					
						writeString(this.jour, dos, oos);
					
						writeString(this.code_mois, dos, oos);
					
						writeString(this.mois, dos, oos);
					
						writeString(this.trimestre, dos, oos);
					
						writeString(this.semestre, dos, oos);
					
						writeDate(this.annee, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("lb_date="+String.valueOf(lb_date));
		sb.append(",id_date="+id_date);
		sb.append(",jour="+jour);
		sb.append(",code_mois="+code_mois);
		sb.append(",mois="+mois);
		sb.append(",trimestre="+trimestre);
		sb.append(",semestre="+semestre);
		sb.append(",annee="+String.valueOf(annee));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(tempsStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id_date, other.id_date);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		tempsStruct temps = new tempsStruct();




	
	/**
	 * [tAdvancedHash_temps begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_temps", false);
		start_Hash.put("tAdvancedHash_temps", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_temps";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("temps"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_temps = 0;
		

			   		// connection name:temps
			   		// source node:tDBInput_3 - inputs:(after_tFileList_1) outputs:(temps,temps) | target node:tAdvancedHash_temps - inputs:(temps) outputs:()
			   		// linked node: tMap_3 - inputs:(cle_art_verifie,temps) outputs:(fait_ventes)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_temps = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<tempsStruct> tHash_Lookup_temps =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<tempsStruct>getLookup(matchingModeEnum_temps);
	   						   
		   	   	   globalMap.put("tHash_Lookup_temps", tHash_Lookup_temps);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_temps begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
		        conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  `temps`.`lb_date`, \n  `temps`.`id_date`, \n  `temps`.`jour`, \n  `temps`.`code_mois`, \n  `temps`.`mois`, \n  `te"
+"mps`.`trimestre`, \n  `temps`.`semestre`, \n  `temps`.`annee`\nFROM `temps`";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								temps.lb_date = null;
							} else {
										
				if(rs_tDBInput_3.getString(1) != null) {
					String dateString_tDBInput_3 = rs_tDBInput_3.getString(1);
					if (!("0000-00-00").equals(dateString_tDBInput_3) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_3)) {
						temps.lb_date = rs_tDBInput_3.getTimestamp(1);
					} else {
						temps.lb_date = (java.util.Date) year0_tDBInput_3.clone();
					}
				} else {
					temps.lb_date =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								temps.id_date = null;
							} else {
	                         		
        	temps.id_date = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								temps.jour = null;
							} else {
	                         		
        	temps.jour = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								temps.code_mois = null;
							} else {
	                         		
        	temps.code_mois = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								temps.mois = null;
							} else {
	                         		
        	temps.mois = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								temps.trimestre = null;
							} else {
	                         		
        	temps.trimestre = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								temps.semestre = null;
							} else {
	                         		
        	temps.semestre = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, false);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								temps.annee = null;
							} else {
										
			//check if year is null in DB
			String yearStringValue_tDBInput_3 = rs_tDBInput_3.getString(8);
			if (null != yearStringValue_tDBInput_3) {
				Integer yearValue_tDBInput_3 = rs_tDBInput_3.getInt(8);
				calendar_tDBInput_3.set(yearValue_tDBInput_3, 0, 1);
				temps.annee = calendar_tDBInput_3.getTime();
			} else {
				temps.annee = null;
			}
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_temps main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_temps";

	

			//temps
			//temps


			
				
				if(execStat){
					runStat.updateStatOnConnection("temps"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					tempsStruct temps_HashRow = new tempsStruct();
		   	   	   
				
				temps_HashRow.lb_date = temps.lb_date;
				
				temps_HashRow.id_date = temps.id_date;
				
				temps_HashRow.jour = temps.jour;
				
				temps_HashRow.code_mois = temps.code_mois;
				
				temps_HashRow.mois = temps.mois;
				
				temps_HashRow.trimestre = temps.trimestre;
				
				temps_HashRow.semestre = temps.semestre;
				
				temps_HashRow.annee = temps.annee;
				
			tHash_Lookup_temps.put(temps_HashRow);
			
            




 


	tos_count_tAdvancedHash_temps++;

/**
 * [tAdvancedHash_temps main ] stop
 */
	
	/**
	 * [tAdvancedHash_temps process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_temps";

	

 



/**
 * [tAdvancedHash_temps process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_temps process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_temps";

	

 



/**
 * [tAdvancedHash_temps process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}

		   globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
		


 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_temps end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_temps";

	

tHash_Lookup_temps.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("temps"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_temps", true);
end_Hash.put("tAdvancedHash_temps", System.currentTimeMillis());




/**
 * [tAdvancedHash_temps end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_temps finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_temps";

	

 



/**
 * [tAdvancedHash_temps finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final FAIT_Ventes FAIT_VentesClass = new FAIT_Ventes();

        int exitCode = FAIT_VentesClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = FAIT_Ventes.class.getClassLoader().getResourceAsStream("grande_distribution/fait_ventes_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = FAIT_Ventes.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileList_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileList_1) {
globalMap.put("tFileList_1_SUBPROCESS_STATE", -1);

e_tFileList_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : FAIT_Ventes");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {//for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}
		
		if(!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     374641 characters generated by Talend Open Studio for Data Integration 
 *     on the April 14, 2020 at 11:37:58 AM CEST
 ************************************************************************************************/