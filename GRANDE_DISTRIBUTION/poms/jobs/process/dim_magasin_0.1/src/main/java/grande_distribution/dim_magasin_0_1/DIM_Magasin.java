// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package grande_distribution.dim_magasin_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: DIM_Magasin Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status
 */
public class DIM_Magasin implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "DIM_Magasin";
	private final String projectName = "GRANDE_DISTRIBUTION";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					DIM_Magasin.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(DIM_Magasin.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String properties_tDBConnection_1 = "noDatetimeStringSync=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
				if (properties_tDBConnection_1 == null || properties_tDBConnection_1.trim().length() == 0) {
					properties_tDBConnection_1 += "rewriteBatchedStatements=true";
				} else if (properties_tDBConnection_1 != null
						&& !properties_tDBConnection_1.contains("rewriteBatchedStatements")) {
					properties_tDBConnection_1 += "&rewriteBatchedStatements=true";
				}

				String url_tDBConnection_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/"
						+ "grande_distribution_db" + "?" + properties_tDBConnection_1;
				String dbUser_tDBConnection_1 = "root";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[3wsOMnbk/woqdy5ZsU6GMg==]");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "com.mysql.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("db_tDBConnection_1", "grande_distribution_db");

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tFileInputDelimited_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_GRANDE_DISTRIBUTION_DIM_Magasin = new byte[0];
		static byte[] commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code_etablissement;

		public String getCode_etablissement() {
			return this.code_etablissement;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.code_etablissement == null) ? 0 : this.code_etablissement.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.code_etablissement == null) {
				if (other.code_etablissement != null)
					return false;

			} else if (!this.code_etablissement.equals(other.code_etablissement))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.code_etablissement = this.code_etablissement;
			other.adresse = this.adresse;
			other.code_postal = this.code_postal;
			other.ville = this.ville;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.code_etablissement = this.code_etablissement;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin.length) {
					if (length < 1024 && commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin.length == 0) {
						commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin = new byte[1024];
					} else {
						commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin, 0, length);
				strReturn = new String(commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_GRANDE_DISTRIBUTION_DIM_Magasin) {

				try {

					int length = 0;

					this.code_etablissement = readString(dis);

					this.adresse = readString(dis);

					this.code_postal = readString(dis);

					this.ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_etablissement, dos);

				// String

				writeString(this.adresse, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_etablissement=" + code_etablissement);
			sb.append(",adresse=" + adresse);
			sb.append(",code_postal=" + code_postal);
			sb.append(",ville=" + ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code_etablissement, other.code_etablissement);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class dim_magasinStruct implements routines.system.IPersistableRow<dim_magasinStruct> {
		final static byte[] commonByteArrayLock_GRANDE_DISTRIBUTION_DIM_Magasin = new byte[0];
		static byte[] commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String code_etablissement;

		public String getCode_etablissement() {
			return this.code_etablissement;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.code_etablissement == null) ? 0 : this.code_etablissement.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final dim_magasinStruct other = (dim_magasinStruct) obj;

			if (this.code_etablissement == null) {
				if (other.code_etablissement != null)
					return false;

			} else if (!this.code_etablissement.equals(other.code_etablissement))

				return false;

			return true;
		}

		public void copyDataTo(dim_magasinStruct other) {

			other.code_etablissement = this.code_etablissement;
			other.adresse = this.adresse;
			other.code_postal = this.code_postal;
			other.ville = this.ville;

		}

		public void copyKeysDataTo(dim_magasinStruct other) {

			other.code_etablissement = this.code_etablissement;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin.length) {
					if (length < 1024 && commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin.length == 0) {
						commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin = new byte[1024];
					} else {
						commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin, 0, length);
				strReturn = new String(commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_GRANDE_DISTRIBUTION_DIM_Magasin) {

				try {

					int length = 0;

					this.code_etablissement = readString(dis);

					this.adresse = readString(dis);

					this.code_postal = readString(dis);

					this.ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.code_etablissement, dos);

				// String

				writeString(this.adresse, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("code_etablissement=" + code_etablissement);
			sb.append(",adresse=" + adresse);
			sb.append(",code_postal=" + code_postal);
			sb.append(",ville=" + ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(dim_magasinStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.code_etablissement, other.code_etablissement);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_GRANDE_DISTRIBUTION_DIM_Magasin = new byte[0];
		static byte[] commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin = new byte[0];

		public String ZIM_ETABLISSEMENT;

		public String getZIM_ETABLISSEMENT() {
			return this.ZIM_ETABLISSEMENT;
		}

		public Integer ZIM_NUMEROUPSUD;

		public Integer getZIM_NUMEROUPSUD() {
			return this.ZIM_NUMEROUPSUD;
		}

		public Integer ZIM_NUMEROMISTRAL;

		public Integer getZIM_NUMEROMISTRAL() {
			return this.ZIM_NUMEROMISTRAL;
		}

		public String ZIM_NUMUPSUDDISTRI;

		public String getZIM_NUMUPSUDDISTRI() {
			return this.ZIM_NUMUPSUDDISTRI;
		}

		public String ZIM_LIBELLE;

		public String getZIM_LIBELLE() {
			return this.ZIM_LIBELLE;
		}

		public String ZIM_ABREGE;

		public String getZIM_ABREGE() {
			return this.ZIM_ABREGE;
		}

		public String ZIM_ADRESSE1;

		public String getZIM_ADRESSE1() {
			return this.ZIM_ADRESSE1;
		}

		public String ZIM_ADRESSE2;

		public String getZIM_ADRESSE2() {
			return this.ZIM_ADRESSE2;
		}

		public String ZIM_ADRESSE3;

		public String getZIM_ADRESSE3() {
			return this.ZIM_ADRESSE3;
		}

		public String ZIM_CODEPOSTAL;

		public String getZIM_CODEPOSTAL() {
			return this.ZIM_CODEPOSTAL;
		}

		public String ZIM_VILLE;

		public String getZIM_VILLE() {
			return this.ZIM_VILLE;
		}

		public String ZIM_DIVTERRIT;

		public String getZIM_DIVTERRIT() {
			return this.ZIM_DIVTERRIT;
		}

		public String ZIM_PAYS;

		public String getZIM_PAYS() {
			return this.ZIM_PAYS;
		}

		public String ZIM_LANGUE;

		public String getZIM_LANGUE() {
			return this.ZIM_LANGUE;
		}

		public String ZIM_TELEPHONE;

		public String getZIM_TELEPHONE() {
			return this.ZIM_TELEPHONE;
		}

		public String ZIM_FAX;

		public String getZIM_FAX() {
			return this.ZIM_FAX;
		}

		public String ZIM_TELEX;

		public String getZIM_TELEX() {
			return this.ZIM_TELEX;
		}

		public String ZIM_SOCIETE;

		public String getZIM_SOCIETE() {
			return this.ZIM_SOCIETE;
		}

		public String ZIM_JURIDIQUE;

		public String getZIM_JURIDIQUE() {
			return this.ZIM_JURIDIQUE;
		}

		public String ZIM_ETABLIE;

		public String getZIM_ETABLIE() {
			return this.ZIM_ETABLIE;
		}

		public String ZIM_EMAIL;

		public String getZIM_EMAIL() {
			return this.ZIM_EMAIL;
		}

		public Long ZIM_SIRET;

		public Long getZIM_SIRET() {
			return this.ZIM_SIRET;
		}

		public String ZIM_ACTIVITE;

		public String getZIM_ACTIVITE() {
			return this.ZIM_ACTIVITE;
		}

		public String ZIM_APE;

		public String getZIM_APE() {
			return this.ZIM_APE;
		}

		public Character ZIM_ACTIF;

		public Character getZIM_ACTIF() {
			return this.ZIM_ACTIF;
		}

		public String ZIM_CHEFMAGASIN;

		public String getZIM_CHEFMAGASIN() {
			return this.ZIM_CHEFMAGASIN;
		}

		public String ZIM_CHEFMAGPORT;

		public String getZIM_CHEFMAGPORT() {
			return this.ZIM_CHEFMAGPORT;
		}

		public String ZIM_SECTEUR;

		public String getZIM_SECTEUR() {
			return this.ZIM_SECTEUR;
		}

		public String ZIM_CHEFSECTEUR;

		public String getZIM_CHEFSECTEUR() {
			return this.ZIM_CHEFSECTEUR;
		}

		public String ZIM_CHEFSECTPORT;

		public String getZIM_CHEFSECTPORT() {
			return this.ZIM_CHEFSECTPORT;
		}

		public String ZIM_CHEFVENTE;

		public String getZIM_CHEFVENTE() {
			return this.ZIM_CHEFVENTE;
		}

		public String ZIM_CHEFVENTEPORT;

		public String getZIM_CHEFVENTEPORT() {
			return this.ZIM_CHEFVENTEPORT;
		}

		public String ZIM_IPFIXE;

		public String getZIM_IPFIXE() {
			return this.ZIM_IPFIXE;
		}

		public String ZIM_IDADSL;

		public String getZIM_IDADSL() {
			return this.ZIM_IDADSL;
		}

		public String ZIM_MDPADSL;

		public String getZIM_MDPADSL() {
			return this.ZIM_MDPADSL;
		}

		public String ZIM_MDPROUTADSL;

		public String getZIM_MDPROUTADSL() {
			return this.ZIM_MDPROUTADSL;
		}

		public Integer ZIM_INSEE;

		public Integer getZIM_INSEE() {
			return this.ZIM_INSEE;
		}

		public String ZIM_REGION;

		public String getZIM_REGION() {
			return this.ZIM_REGION;
		}

		public java.util.Date ZIM_DATEOUV;

		public java.util.Date getZIM_DATEOUV() {
			return this.ZIM_DATEOUV;
		}

		public java.util.Date ZIM_DATEFERM;

		public java.util.Date getZIM_DATEFERM() {
			return this.ZIM_DATEFERM;
		}

		public java.util.Date ZIM_DATEUTIL;

		public java.util.Date getZIM_DATEUTIL() {
			return this.ZIM_DATEUTIL;
		}

		public java.util.Date ZIM_DATEDERRENOV;

		public java.util.Date getZIM_DATEDERRENOV() {
			return this.ZIM_DATEDERRENOV;
		}

		public Integer ZIM_NBCAISSE;

		public Integer getZIM_NBCAISSE() {
			return this.ZIM_NBCAISSE;
		}

		public Integer ZIM_NBTPE;

		public Integer getZIM_NBTPE() {
			return this.ZIM_NBTPE;
		}

		public String ZIM_TPEMAINT;

		public String getZIM_TPEMAINT() {
			return this.ZIM_TPEMAINT;
		}

		public String ZIM_TPEHOTLINE;

		public String getZIM_TPEHOTLINE() {
			return this.ZIM_TPEHOTLINE;
		}

		public String ZIM_NUMCPTEIPS;

		public String getZIM_NUMCPTEIPS() {
			return this.ZIM_NUMCPTEIPS;
		}

		public String ZIM_TPENUMSERIE1;

		public String getZIM_TPENUMSERIE1() {
			return this.ZIM_TPENUMSERIE1;
		}

		public String ZIM_TPENUMSERIE2;

		public String getZIM_TPENUMSERIE2() {
			return this.ZIM_TPENUMSERIE2;
		}

		public String ZIM_TPENUMSERIE3;

		public String getZIM_TPENUMSERIE3() {
			return this.ZIM_TPENUMSERIE3;
		}

		public Integer ZIM_NUMDOMBANQUE;

		public Integer getZIM_NUMDOMBANQUE() {
			return this.ZIM_NUMDOMBANQUE;
		}

		public String ZIM_BANQUETPE;

		public String getZIM_BANQUETPE() {
			return this.ZIM_BANQUETPE;
		}

		public String ZIM_BANQUEVERS;

		public String getZIM_BANQUEVERS() {
			return this.ZIM_BANQUEVERS;
		}

		public String ZIM_NUMCOMPTE;

		public String getZIM_NUMCOMPTE() {
			return this.ZIM_NUMCOMPTE;
		}

		public String ZIM_ADRVERSEMENT;

		public String getZIM_ADRVERSEMENT() {
			return this.ZIM_ADRVERSEMENT;
		}

		public String ZIM_CSECTBINOME;

		public String getZIM_CSECTBINOME() {
			return this.ZIM_CSECTBINOME;
		}

		public String ZIM_MDPWEBMISTRAL;

		public String getZIM_MDPWEBMISTRAL() {
			return this.ZIM_MDPWEBMISTRAL;
		}

		public String ZIM_TYPECAISSE;

		public String getZIM_TYPECAISSE() {
			return this.ZIM_TYPECAISSE;
		}

		public String ZIM_ENSEIGNE;

		public String getZIM_ENSEIGNE() {
			return this.ZIM_ENSEIGNE;
		}

		public String ZIM_ENTREPOTLIVRE;

		public String getZIM_ENTREPOTLIVRE() {
			return this.ZIM_ENTREPOTLIVRE;
		}

		public String ZIM_ADRFTPMAG;

		public String getZIM_ADRFTPMAG() {
			return this.ZIM_ADRFTPMAG;
		}

		public Integer ZIM_CPTEFTP;

		public Integer getZIM_CPTEFTP() {
			return this.ZIM_CPTEFTP;
		}

		public Integer ZIM_MDPFTP;

		public Integer getZIM_MDPFTP() {
			return this.ZIM_MDPFTP;
		}

		public String ZIM_CPTETEAMVPC;

		public String getZIM_CPTETEAMVPC() {
			return this.ZIM_CPTETEAMVPC;
		}

		public Integer ZIM_CPTETEAMVC1;

		public Integer getZIM_CPTETEAMVC1() {
			return this.ZIM_CPTETEAMVC1;
		}

		public Integer ZIM_CPTETEAMVC2;

		public Integer getZIM_CPTETEAMVC2() {
			return this.ZIM_CPTETEAMVC2;
		}

		public String ZIM_CPTETEAMVC3;

		public String getZIM_CPTETEAMVC3() {
			return this.ZIM_CPTETEAMVC3;
		}

		public String ZIM_MDPTEAMVPC;

		public String getZIM_MDPTEAMVPC() {
			return this.ZIM_MDPTEAMVPC;
		}

		public String ZIM_MDPTEAMVC1;

		public String getZIM_MDPTEAMVC1() {
			return this.ZIM_MDPTEAMVC1;
		}

		public String ZIM_MDPTEAMVC2;

		public String getZIM_MDPTEAMVC2() {
			return this.ZIM_MDPTEAMVC2;
		}

		public String ZIM_MDPTEAMVC3;

		public String getZIM_MDPTEAMVC3() {
			return this.ZIM_MDPTEAMVC3;
		}

		public String ZIM_IDCENTRETRAIT;

		public String getZIM_IDCENTRETRAIT() {
			return this.ZIM_IDCENTRETRAIT;
		}

		public Integer ZIM_SUPERFVENTE;

		public Integer getZIM_SUPERFVENTE() {
			return this.ZIM_SUPERFVENTE;
		}

		public Integer ZIM_SUPERFANNEX;

		public Integer getZIM_SUPERFANNEX() {
			return this.ZIM_SUPERFANNEX;
		}

		public Integer ZIM_PEDF1;

		public Integer getZIM_PEDF1() {
			return this.ZIM_PEDF1;
		}

		public Integer ZIM_PEDF2;

		public Integer getZIM_PEDF2() {
			return this.ZIM_PEDF2;
		}

		public Long ZIM_NUMPDL1;

		public Long getZIM_NUMPDL1() {
			return this.ZIM_NUMPDL1;
		}

		public String ZIM_NUMPDL2;

		public String getZIM_NUMPDL2() {
			return this.ZIM_NUMPDL2;
		}

		public String ZIM_TYPETARIFEDF;

		public String getZIM_TYPETARIFEDF() {
			return this.ZIM_TYPETARIFEDF;
		}

		public String ZIM_FOURELEC;

		public String getZIM_FOURELEC() {
			return this.ZIM_FOURELEC;
		}

		public Integer ZIM_SIREN;

		public Integer getZIM_SIREN() {
			return this.ZIM_SIREN;
		}

		public String ZIM_FREQLIVRAISON;

		public String getZIM_FREQLIVRAISON() {
			return this.ZIM_FREQLIVRAISON;
		}

		public String ZIM_TELESURVNOM;

		public String getZIM_TELESURVNOM() {
			return this.ZIM_TELESURVNOM;
		}

		public String ZIM_TELESURVCONTAC;

		public String getZIM_TELESURVCONTAC() {
			return this.ZIM_TELESURVCONTAC;
		}

		public String ZIM_TELESURVTEL;

		public String getZIM_TELESURVTEL() {
			return this.ZIM_TELESURVTEL;
		}

		public String ZIM_VIDSURVNOM;

		public String getZIM_VIDSURVNOM() {
			return this.ZIM_VIDSURVNOM;
		}

		public String ZIM_VIDSURVCONTACT;

		public String getZIM_VIDSURVCONTACT() {
			return this.ZIM_VIDSURVCONTACT;
		}

		public String ZIM_VIDSURVTEL;

		public String getZIM_VIDSURVTEL() {
			return this.ZIM_VIDSURVTEL;
		}

		public String ZIM_CLIMNOM;

		public String getZIM_CLIMNOM() {
			return this.ZIM_CLIMNOM;
		}

		public String ZIM_CLIMCONTACT;

		public String getZIM_CLIMCONTACT() {
			return this.ZIM_CLIMCONTACT;
		}

		public String ZIM_CLIMTEL;

		public String getZIM_CLIMTEL() {
			return this.ZIM_CLIMTEL;
		}

		public String ZIM_FROIDPOSNOM;

		public String getZIM_FROIDPOSNOM() {
			return this.ZIM_FROIDPOSNOM;
		}

		public String ZIM_FROIDPOSCONTAC;

		public String getZIM_FROIDPOSCONTAC() {
			return this.ZIM_FROIDPOSCONTAC;
		}

		public String ZIM_FROIDPOSTEL;

		public String getZIM_FROIDPOSTEL() {
			return this.ZIM_FROIDPOSTEL;
		}

		public String ZIM_FROIDNEGNOM;

		public String getZIM_FROIDNEGNOM() {
			return this.ZIM_FROIDNEGNOM;
		}

		public String ZIM_FROIDNEGCONTAC;

		public String getZIM_FROIDNEGCONTAC() {
			return this.ZIM_FROIDNEGCONTAC;
		}

		public String ZIM_FROIDNEGTEL;

		public String getZIM_FROIDNEGTEL() {
			return this.ZIM_FROIDNEGTEL;
		}

		public String ZIM_ANTIVOLNOM;

		public String getZIM_ANTIVOLNOM() {
			return this.ZIM_ANTIVOLNOM;
		}

		public String ZIM_ANTIVOLCONTACT;

		public String getZIM_ANTIVOLCONTACT() {
			return this.ZIM_ANTIVOLCONTACT;
		}

		public String ZIM_ANTIVOLTEL;

		public String getZIM_ANTIVOLTEL() {
			return this.ZIM_ANTIVOLTEL;
		}

		public String ZIM_IPVIDEOSURV;

		public String getZIM_IPVIDEOSURV() {
			return this.ZIM_IPVIDEOSURV;
		}

		public String ZIM_PROADMINROUT;

		public String getZIM_PROADMINROUT() {
			return this.ZIM_PROADMINROUT;
		}

		public String ZIM_MDPADMINROUT;

		public String getZIM_MDPADMINROUT() {
			return this.ZIM_MDPADMINROUT;
		}

		public String ZIM_MAILSECTEUR;

		public String getZIM_MAILSECTEUR() {
			return this.ZIM_MAILSECTEUR;
		}

		public String ZIM_TIERSSURV;

		public String getZIM_TIERSSURV() {
			return this.ZIM_TIERSSURV;
		}

		public String ZIM_TIERSVIDSURV;

		public String getZIM_TIERSVIDSURV() {
			return this.ZIM_TIERSVIDSURV;
		}

		public String ZIM_CLIMTIERS;

		public String getZIM_CLIMTIERS() {
			return this.ZIM_CLIMTIERS;
		}

		public String ZIM_ANTIVOLTIERS;

		public String getZIM_ANTIVOLTIERS() {
			return this.ZIM_ANTIVOLTIERS;
		}

		public String ZIM_FROIDPOSTIERS;

		public String getZIM_FROIDPOSTIERS() {
			return this.ZIM_FROIDPOSTIERS;
		}

		public String ZIM_FROIDNEGTIERS;

		public String getZIM_FROIDNEGTIERS() {
			return this.ZIM_FROIDNEGTIERS;
		}

		public String ZIM_FAXCLIM;

		public String getZIM_FAXCLIM() {
			return this.ZIM_FAXCLIM;
		}

		public String ZIM_MAILCLIM;

		public String getZIM_MAILCLIM() {
			return this.ZIM_MAILCLIM;
		}

		public String ZIM_FAXANTIVOL;

		public String getZIM_FAXANTIVOL() {
			return this.ZIM_FAXANTIVOL;
		}

		public String ZIM_MAILANTIVOL;

		public String getZIM_MAILANTIVOL() {
			return this.ZIM_MAILANTIVOL;
		}

		public String ZIM_FAXFROIDPOS;

		public String getZIM_FAXFROIDPOS() {
			return this.ZIM_FAXFROIDPOS;
		}

		public String ZIM_MAILFROIDPOS;

		public String getZIM_MAILFROIDPOS() {
			return this.ZIM_MAILFROIDPOS;
		}

		public String ZIM_FAXFROIDNEG;

		public String getZIM_FAXFROIDNEG() {
			return this.ZIM_FAXFROIDNEG;
		}

		public String ZIM_MAILFROIDNEG;

		public String getZIM_MAILFROIDNEG() {
			return this.ZIM_MAILFROIDNEG;
		}

		public Integer ZIM_BAILLEURTIERS1;

		public Integer getZIM_BAILLEURTIERS1() {
			return this.ZIM_BAILLEURTIERS1;
		}

		public String ZIM_BAILLEURRS1;

		public String getZIM_BAILLEURRS1() {
			return this.ZIM_BAILLEURRS1;
		}

		public String ZIM_BAILLEUR1ADR1;

		public String getZIM_BAILLEUR1ADR1() {
			return this.ZIM_BAILLEUR1ADR1;
		}

		public String ZIM_BAILLEUR1ADR2;

		public String getZIM_BAILLEUR1ADR2() {
			return this.ZIM_BAILLEUR1ADR2;
		}

		public String ZIM_BAILLEUR1ADR3;

		public String getZIM_BAILLEUR1ADR3() {
			return this.ZIM_BAILLEUR1ADR3;
		}

		public String ZIM_BAILLEURCP1;

		public String getZIM_BAILLEURCP1() {
			return this.ZIM_BAILLEURCP1;
		}

		public String ZIM_BAILLEURVILLE1;

		public String getZIM_BAILLEURVILLE1() {
			return this.ZIM_BAILLEURVILLE1;
		}

		public String ZIM_BAILLEURTEL1;

		public String getZIM_BAILLEURTEL1() {
			return this.ZIM_BAILLEURTEL1;
		}

		public String ZIM_BAILLEURFAX1;

		public String getZIM_BAILLEURFAX1() {
			return this.ZIM_BAILLEURFAX1;
		}

		public String ZIM_BAILLEURMAIL1;

		public String getZIM_BAILLEURMAIL1() {
			return this.ZIM_BAILLEURMAIL1;
		}

		public java.util.Date ZIM_DATEBAIL1;

		public java.util.Date getZIM_DATEBAIL1() {
			return this.ZIM_DATEBAIL1;
		}

		public String ZIM_BAILLEURTIERS2;

		public String getZIM_BAILLEURTIERS2() {
			return this.ZIM_BAILLEURTIERS2;
		}

		public String ZIM_BAILLEURRS2;

		public String getZIM_BAILLEURRS2() {
			return this.ZIM_BAILLEURRS2;
		}

		public String ZIM_BAILLEUR2ADR1;

		public String getZIM_BAILLEUR2ADR1() {
			return this.ZIM_BAILLEUR2ADR1;
		}

		public String ZIM_BAILLEUR2ADR2;

		public String getZIM_BAILLEUR2ADR2() {
			return this.ZIM_BAILLEUR2ADR2;
		}

		public String ZIM_BAILLEUR2ADR3;

		public String getZIM_BAILLEUR2ADR3() {
			return this.ZIM_BAILLEUR2ADR3;
		}

		public String ZIM_BAILLEURCP2;

		public String getZIM_BAILLEURCP2() {
			return this.ZIM_BAILLEURCP2;
		}

		public String ZIM_BAILLEURVILLE2;

		public String getZIM_BAILLEURVILLE2() {
			return this.ZIM_BAILLEURVILLE2;
		}

		public String ZIM_BAILLEURTEL2;

		public String getZIM_BAILLEURTEL2() {
			return this.ZIM_BAILLEURTEL2;
		}

		public String ZIM_BAILLEURFAX2;

		public String getZIM_BAILLEURFAX2() {
			return this.ZIM_BAILLEURFAX2;
		}

		public String ZIM_BAILLEURMAIL2;

		public String getZIM_BAILLEURMAIL2() {
			return this.ZIM_BAILLEURMAIL2;
		}

		public String ZIM_DATEBAIL2;

		public String getZIM_DATEBAIL2() {
			return this.ZIM_DATEBAIL2;
		}

		public String ZIM_BAILLEURTIERS3;

		public String getZIM_BAILLEURTIERS3() {
			return this.ZIM_BAILLEURTIERS3;
		}

		public String ZIM_BAILLEURRS3;

		public String getZIM_BAILLEURRS3() {
			return this.ZIM_BAILLEURRS3;
		}

		public String ZIM_BAILLEUR3ADR1;

		public String getZIM_BAILLEUR3ADR1() {
			return this.ZIM_BAILLEUR3ADR1;
		}

		public String ZIM_BAILLEUR3ADR2;

		public String getZIM_BAILLEUR3ADR2() {
			return this.ZIM_BAILLEUR3ADR2;
		}

		public String ZIM_BAILLEUR3ADR3;

		public String getZIM_BAILLEUR3ADR3() {
			return this.ZIM_BAILLEUR3ADR3;
		}

		public String ZIM_BAILLEURCP3;

		public String getZIM_BAILLEURCP3() {
			return this.ZIM_BAILLEURCP3;
		}

		public String ZIM_BAILLEURVILLE3;

		public String getZIM_BAILLEURVILLE3() {
			return this.ZIM_BAILLEURVILLE3;
		}

		public String ZIM_BAILLEURTEL3;

		public String getZIM_BAILLEURTEL3() {
			return this.ZIM_BAILLEURTEL3;
		}

		public String ZIM_BAILLEURFAX3;

		public String getZIM_BAILLEURFAX3() {
			return this.ZIM_BAILLEURFAX3;
		}

		public String ZIM_BAILLEURMAIL3;

		public String getZIM_BAILLEURMAIL3() {
			return this.ZIM_BAILLEURMAIL3;
		}

		public String ZIM_DATEBAIL3;

		public String getZIM_DATEBAIL3() {
			return this.ZIM_DATEBAIL3;
		}

		public String ZIM_BAILLEURTIERS4;

		public String getZIM_BAILLEURTIERS4() {
			return this.ZIM_BAILLEURTIERS4;
		}

		public String ZIM_BAILLEURRS4;

		public String getZIM_BAILLEURRS4() {
			return this.ZIM_BAILLEURRS4;
		}

		public String ZIM_BAILLEUR4ADR1;

		public String getZIM_BAILLEUR4ADR1() {
			return this.ZIM_BAILLEUR4ADR1;
		}

		public String ZIM_BAILLEUR4ADR2;

		public String getZIM_BAILLEUR4ADR2() {
			return this.ZIM_BAILLEUR4ADR2;
		}

		public String ZIM_BAILLEUR4ADR3;

		public String getZIM_BAILLEUR4ADR3() {
			return this.ZIM_BAILLEUR4ADR3;
		}

		public String ZIM_BAILLEURCP4;

		public String getZIM_BAILLEURCP4() {
			return this.ZIM_BAILLEURCP4;
		}

		public String ZIM_BAILLEURVILLE4;

		public String getZIM_BAILLEURVILLE4() {
			return this.ZIM_BAILLEURVILLE4;
		}

		public String ZIM_BAILLEURTEL4;

		public String getZIM_BAILLEURTEL4() {
			return this.ZIM_BAILLEURTEL4;
		}

		public String ZIM_BAILLEURFAX4;

		public String getZIM_BAILLEURFAX4() {
			return this.ZIM_BAILLEURFAX4;
		}

		public String ZIM_BAILLEURMAIL4;

		public String getZIM_BAILLEURMAIL4() {
			return this.ZIM_BAILLEURMAIL4;
		}

		public String ZIM_DATEBAIL4;

		public String getZIM_DATEBAIL4() {
			return this.ZIM_DATEBAIL4;
		}

		public String ZIM_SYNDIC;

		public String getZIM_SYNDIC() {
			return this.ZIM_SYNDIC;
		}

		public String ZIM_SYNDICRS;

		public String getZIM_SYNDICRS() {
			return this.ZIM_SYNDICRS;
		}

		public String ZIM_SYNDICADR1;

		public String getZIM_SYNDICADR1() {
			return this.ZIM_SYNDICADR1;
		}

		public String ZIM_SYNDICADR2;

		public String getZIM_SYNDICADR2() {
			return this.ZIM_SYNDICADR2;
		}

		public String ZIM_SYNDICADR3;

		public String getZIM_SYNDICADR3() {
			return this.ZIM_SYNDICADR3;
		}

		public String ZIM_SYNDICCP;

		public String getZIM_SYNDICCP() {
			return this.ZIM_SYNDICCP;
		}

		public String ZIM_SYNDICVILLE;

		public String getZIM_SYNDICVILLE() {
			return this.ZIM_SYNDICVILLE;
		}

		public String ZIM_SYNDICTEL;

		public String getZIM_SYNDICTEL() {
			return this.ZIM_SYNDICTEL;
		}

		public String ZIM_SYNDICFAX;

		public String getZIM_SYNDICFAX() {
			return this.ZIM_SYNDICFAX;
		}

		public String ZIM_SYNDICMAIL;

		public String getZIM_SYNDICMAIL() {
			return this.ZIM_SYNDICMAIL;
		}

		public String ZIM_LUNDIMDEB;

		public String getZIM_LUNDIMDEB() {
			return this.ZIM_LUNDIMDEB;
		}

		public String ZIM_LUNDIMFIN;

		public String getZIM_LUNDIMFIN() {
			return this.ZIM_LUNDIMFIN;
		}

		public String ZIM_LUNDIAPDEB;

		public String getZIM_LUNDIAPDEB() {
			return this.ZIM_LUNDIAPDEB;
		}

		public String ZIM_LUNDIAPFIN;

		public String getZIM_LUNDIAPFIN() {
			return this.ZIM_LUNDIAPFIN;
		}

		public String ZIM_MARDIMDEB;

		public String getZIM_MARDIMDEB() {
			return this.ZIM_MARDIMDEB;
		}

		public String ZIM_MARDIMFIN;

		public String getZIM_MARDIMFIN() {
			return this.ZIM_MARDIMFIN;
		}

		public String ZIM_MARDIAPDEB;

		public String getZIM_MARDIAPDEB() {
			return this.ZIM_MARDIAPDEB;
		}

		public String ZIM_MARDIAPFIN;

		public String getZIM_MARDIAPFIN() {
			return this.ZIM_MARDIAPFIN;
		}

		public String ZIM_MERCREDIMDEB;

		public String getZIM_MERCREDIMDEB() {
			return this.ZIM_MERCREDIMDEB;
		}

		public String ZIM_MERCREDIMFIN;

		public String getZIM_MERCREDIMFIN() {
			return this.ZIM_MERCREDIMFIN;
		}

		public String ZIM_MERCREDIAPDEB;

		public String getZIM_MERCREDIAPDEB() {
			return this.ZIM_MERCREDIAPDEB;
		}

		public String ZIM_MERCREDIAPFIN;

		public String getZIM_MERCREDIAPFIN() {
			return this.ZIM_MERCREDIAPFIN;
		}

		public String ZIM_JEUDIMDEB;

		public String getZIM_JEUDIMDEB() {
			return this.ZIM_JEUDIMDEB;
		}

		public String ZIM_JEUDIMFIN;

		public String getZIM_JEUDIMFIN() {
			return this.ZIM_JEUDIMFIN;
		}

		public String ZIM_JEUDIAPDEB;

		public String getZIM_JEUDIAPDEB() {
			return this.ZIM_JEUDIAPDEB;
		}

		public String ZIM_JEUDIAPFIN;

		public String getZIM_JEUDIAPFIN() {
			return this.ZIM_JEUDIAPFIN;
		}

		public String ZIM_VENDREDIMDEB;

		public String getZIM_VENDREDIMDEB() {
			return this.ZIM_VENDREDIMDEB;
		}

		public String ZIM_VENDREDIMFIN;

		public String getZIM_VENDREDIMFIN() {
			return this.ZIM_VENDREDIMFIN;
		}

		public String ZIM_VENDREDIAPDEB;

		public String getZIM_VENDREDIAPDEB() {
			return this.ZIM_VENDREDIAPDEB;
		}

		public String ZIM_VENDREDIAPFIN;

		public String getZIM_VENDREDIAPFIN() {
			return this.ZIM_VENDREDIAPFIN;
		}

		public String ZIM_SAMEDIMDEB;

		public String getZIM_SAMEDIMDEB() {
			return this.ZIM_SAMEDIMDEB;
		}

		public String ZIM_SAMEDIMFIN;

		public String getZIM_SAMEDIMFIN() {
			return this.ZIM_SAMEDIMFIN;
		}

		public String ZIM_SAMEDIAPDEB;

		public String getZIM_SAMEDIAPDEB() {
			return this.ZIM_SAMEDIAPDEB;
		}

		public String ZIM_SAMEDIAPFIN;

		public String getZIM_SAMEDIAPFIN() {
			return this.ZIM_SAMEDIAPFIN;
		}

		public String ZIM_DIMANCHEMDEB;

		public String getZIM_DIMANCHEMDEB() {
			return this.ZIM_DIMANCHEMDEB;
		}

		public String ZIM_DIMANCHEMFIN;

		public String getZIM_DIMANCHEMFIN() {
			return this.ZIM_DIMANCHEMFIN;
		}

		public String ZIM_DIMANCHEAPDEB;

		public String getZIM_DIMANCHEAPDEB() {
			return this.ZIM_DIMANCHEAPDEB;
		}

		public String ZIM_DIMANCHEAPFIN;

		public String getZIM_DIMANCHEAPFIN() {
			return this.ZIM_DIMANCHEAPFIN;
		}

		public String ZIM_DATECREATION;

		public String getZIM_DATECREATION() {
			return this.ZIM_DATECREATION;
		}

		public java.util.Date ZIM_DATEMODIF;

		public java.util.Date getZIM_DATEMODIF() {
			return this.ZIM_DATEMODIF;
		}

		public String ZIM_CREATEUR;

		public String getZIM_CREATEUR() {
			return this.ZIM_CREATEUR;
		}

		public String ZIM_UTILISATEUR;

		public String getZIM_UTILISATEUR() {
			return this.ZIM_UTILISATEUR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin.length) {
					if (length < 1024 && commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin.length == 0) {
						commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin = new byte[1024];
					} else {
						commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin, 0, length);
				strReturn = new String(commonByteArray_GRANDE_DISTRIBUTION_DIM_Magasin, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_GRANDE_DISTRIBUTION_DIM_Magasin) {

				try {

					int length = 0;

					this.ZIM_ETABLISSEMENT = readString(dis);

					this.ZIM_NUMEROUPSUD = readInteger(dis);

					this.ZIM_NUMEROMISTRAL = readInteger(dis);

					this.ZIM_NUMUPSUDDISTRI = readString(dis);

					this.ZIM_LIBELLE = readString(dis);

					this.ZIM_ABREGE = readString(dis);

					this.ZIM_ADRESSE1 = readString(dis);

					this.ZIM_ADRESSE2 = readString(dis);

					this.ZIM_ADRESSE3 = readString(dis);

					this.ZIM_CODEPOSTAL = readString(dis);

					this.ZIM_VILLE = readString(dis);

					this.ZIM_DIVTERRIT = readString(dis);

					this.ZIM_PAYS = readString(dis);

					this.ZIM_LANGUE = readString(dis);

					this.ZIM_TELEPHONE = readString(dis);

					this.ZIM_FAX = readString(dis);

					this.ZIM_TELEX = readString(dis);

					this.ZIM_SOCIETE = readString(dis);

					this.ZIM_JURIDIQUE = readString(dis);

					this.ZIM_ETABLIE = readString(dis);

					this.ZIM_EMAIL = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ZIM_SIRET = null;
					} else {
						this.ZIM_SIRET = dis.readLong();
					}

					this.ZIM_ACTIVITE = readString(dis);

					this.ZIM_APE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ZIM_ACTIF = null;
					} else {
						this.ZIM_ACTIF = dis.readChar();
					}

					this.ZIM_CHEFMAGASIN = readString(dis);

					this.ZIM_CHEFMAGPORT = readString(dis);

					this.ZIM_SECTEUR = readString(dis);

					this.ZIM_CHEFSECTEUR = readString(dis);

					this.ZIM_CHEFSECTPORT = readString(dis);

					this.ZIM_CHEFVENTE = readString(dis);

					this.ZIM_CHEFVENTEPORT = readString(dis);

					this.ZIM_IPFIXE = readString(dis);

					this.ZIM_IDADSL = readString(dis);

					this.ZIM_MDPADSL = readString(dis);

					this.ZIM_MDPROUTADSL = readString(dis);

					this.ZIM_INSEE = readInteger(dis);

					this.ZIM_REGION = readString(dis);

					this.ZIM_DATEOUV = readDate(dis);

					this.ZIM_DATEFERM = readDate(dis);

					this.ZIM_DATEUTIL = readDate(dis);

					this.ZIM_DATEDERRENOV = readDate(dis);

					this.ZIM_NBCAISSE = readInteger(dis);

					this.ZIM_NBTPE = readInteger(dis);

					this.ZIM_TPEMAINT = readString(dis);

					this.ZIM_TPEHOTLINE = readString(dis);

					this.ZIM_NUMCPTEIPS = readString(dis);

					this.ZIM_TPENUMSERIE1 = readString(dis);

					this.ZIM_TPENUMSERIE2 = readString(dis);

					this.ZIM_TPENUMSERIE3 = readString(dis);

					this.ZIM_NUMDOMBANQUE = readInteger(dis);

					this.ZIM_BANQUETPE = readString(dis);

					this.ZIM_BANQUEVERS = readString(dis);

					this.ZIM_NUMCOMPTE = readString(dis);

					this.ZIM_ADRVERSEMENT = readString(dis);

					this.ZIM_CSECTBINOME = readString(dis);

					this.ZIM_MDPWEBMISTRAL = readString(dis);

					this.ZIM_TYPECAISSE = readString(dis);

					this.ZIM_ENSEIGNE = readString(dis);

					this.ZIM_ENTREPOTLIVRE = readString(dis);

					this.ZIM_ADRFTPMAG = readString(dis);

					this.ZIM_CPTEFTP = readInteger(dis);

					this.ZIM_MDPFTP = readInteger(dis);

					this.ZIM_CPTETEAMVPC = readString(dis);

					this.ZIM_CPTETEAMVC1 = readInteger(dis);

					this.ZIM_CPTETEAMVC2 = readInteger(dis);

					this.ZIM_CPTETEAMVC3 = readString(dis);

					this.ZIM_MDPTEAMVPC = readString(dis);

					this.ZIM_MDPTEAMVC1 = readString(dis);

					this.ZIM_MDPTEAMVC2 = readString(dis);

					this.ZIM_MDPTEAMVC3 = readString(dis);

					this.ZIM_IDCENTRETRAIT = readString(dis);

					this.ZIM_SUPERFVENTE = readInteger(dis);

					this.ZIM_SUPERFANNEX = readInteger(dis);

					this.ZIM_PEDF1 = readInteger(dis);

					this.ZIM_PEDF2 = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ZIM_NUMPDL1 = null;
					} else {
						this.ZIM_NUMPDL1 = dis.readLong();
					}

					this.ZIM_NUMPDL2 = readString(dis);

					this.ZIM_TYPETARIFEDF = readString(dis);

					this.ZIM_FOURELEC = readString(dis);

					this.ZIM_SIREN = readInteger(dis);

					this.ZIM_FREQLIVRAISON = readString(dis);

					this.ZIM_TELESURVNOM = readString(dis);

					this.ZIM_TELESURVCONTAC = readString(dis);

					this.ZIM_TELESURVTEL = readString(dis);

					this.ZIM_VIDSURVNOM = readString(dis);

					this.ZIM_VIDSURVCONTACT = readString(dis);

					this.ZIM_VIDSURVTEL = readString(dis);

					this.ZIM_CLIMNOM = readString(dis);

					this.ZIM_CLIMCONTACT = readString(dis);

					this.ZIM_CLIMTEL = readString(dis);

					this.ZIM_FROIDPOSNOM = readString(dis);

					this.ZIM_FROIDPOSCONTAC = readString(dis);

					this.ZIM_FROIDPOSTEL = readString(dis);

					this.ZIM_FROIDNEGNOM = readString(dis);

					this.ZIM_FROIDNEGCONTAC = readString(dis);

					this.ZIM_FROIDNEGTEL = readString(dis);

					this.ZIM_ANTIVOLNOM = readString(dis);

					this.ZIM_ANTIVOLCONTACT = readString(dis);

					this.ZIM_ANTIVOLTEL = readString(dis);

					this.ZIM_IPVIDEOSURV = readString(dis);

					this.ZIM_PROADMINROUT = readString(dis);

					this.ZIM_MDPADMINROUT = readString(dis);

					this.ZIM_MAILSECTEUR = readString(dis);

					this.ZIM_TIERSSURV = readString(dis);

					this.ZIM_TIERSVIDSURV = readString(dis);

					this.ZIM_CLIMTIERS = readString(dis);

					this.ZIM_ANTIVOLTIERS = readString(dis);

					this.ZIM_FROIDPOSTIERS = readString(dis);

					this.ZIM_FROIDNEGTIERS = readString(dis);

					this.ZIM_FAXCLIM = readString(dis);

					this.ZIM_MAILCLIM = readString(dis);

					this.ZIM_FAXANTIVOL = readString(dis);

					this.ZIM_MAILANTIVOL = readString(dis);

					this.ZIM_FAXFROIDPOS = readString(dis);

					this.ZIM_MAILFROIDPOS = readString(dis);

					this.ZIM_FAXFROIDNEG = readString(dis);

					this.ZIM_MAILFROIDNEG = readString(dis);

					this.ZIM_BAILLEURTIERS1 = readInteger(dis);

					this.ZIM_BAILLEURRS1 = readString(dis);

					this.ZIM_BAILLEUR1ADR1 = readString(dis);

					this.ZIM_BAILLEUR1ADR2 = readString(dis);

					this.ZIM_BAILLEUR1ADR3 = readString(dis);

					this.ZIM_BAILLEURCP1 = readString(dis);

					this.ZIM_BAILLEURVILLE1 = readString(dis);

					this.ZIM_BAILLEURTEL1 = readString(dis);

					this.ZIM_BAILLEURFAX1 = readString(dis);

					this.ZIM_BAILLEURMAIL1 = readString(dis);

					this.ZIM_DATEBAIL1 = readDate(dis);

					this.ZIM_BAILLEURTIERS2 = readString(dis);

					this.ZIM_BAILLEURRS2 = readString(dis);

					this.ZIM_BAILLEUR2ADR1 = readString(dis);

					this.ZIM_BAILLEUR2ADR2 = readString(dis);

					this.ZIM_BAILLEUR2ADR3 = readString(dis);

					this.ZIM_BAILLEURCP2 = readString(dis);

					this.ZIM_BAILLEURVILLE2 = readString(dis);

					this.ZIM_BAILLEURTEL2 = readString(dis);

					this.ZIM_BAILLEURFAX2 = readString(dis);

					this.ZIM_BAILLEURMAIL2 = readString(dis);

					this.ZIM_DATEBAIL2 = readString(dis);

					this.ZIM_BAILLEURTIERS3 = readString(dis);

					this.ZIM_BAILLEURRS3 = readString(dis);

					this.ZIM_BAILLEUR3ADR1 = readString(dis);

					this.ZIM_BAILLEUR3ADR2 = readString(dis);

					this.ZIM_BAILLEUR3ADR3 = readString(dis);

					this.ZIM_BAILLEURCP3 = readString(dis);

					this.ZIM_BAILLEURVILLE3 = readString(dis);

					this.ZIM_BAILLEURTEL3 = readString(dis);

					this.ZIM_BAILLEURFAX3 = readString(dis);

					this.ZIM_BAILLEURMAIL3 = readString(dis);

					this.ZIM_DATEBAIL3 = readString(dis);

					this.ZIM_BAILLEURTIERS4 = readString(dis);

					this.ZIM_BAILLEURRS4 = readString(dis);

					this.ZIM_BAILLEUR4ADR1 = readString(dis);

					this.ZIM_BAILLEUR4ADR2 = readString(dis);

					this.ZIM_BAILLEUR4ADR3 = readString(dis);

					this.ZIM_BAILLEURCP4 = readString(dis);

					this.ZIM_BAILLEURVILLE4 = readString(dis);

					this.ZIM_BAILLEURTEL4 = readString(dis);

					this.ZIM_BAILLEURFAX4 = readString(dis);

					this.ZIM_BAILLEURMAIL4 = readString(dis);

					this.ZIM_DATEBAIL4 = readString(dis);

					this.ZIM_SYNDIC = readString(dis);

					this.ZIM_SYNDICRS = readString(dis);

					this.ZIM_SYNDICADR1 = readString(dis);

					this.ZIM_SYNDICADR2 = readString(dis);

					this.ZIM_SYNDICADR3 = readString(dis);

					this.ZIM_SYNDICCP = readString(dis);

					this.ZIM_SYNDICVILLE = readString(dis);

					this.ZIM_SYNDICTEL = readString(dis);

					this.ZIM_SYNDICFAX = readString(dis);

					this.ZIM_SYNDICMAIL = readString(dis);

					this.ZIM_LUNDIMDEB = readString(dis);

					this.ZIM_LUNDIMFIN = readString(dis);

					this.ZIM_LUNDIAPDEB = readString(dis);

					this.ZIM_LUNDIAPFIN = readString(dis);

					this.ZIM_MARDIMDEB = readString(dis);

					this.ZIM_MARDIMFIN = readString(dis);

					this.ZIM_MARDIAPDEB = readString(dis);

					this.ZIM_MARDIAPFIN = readString(dis);

					this.ZIM_MERCREDIMDEB = readString(dis);

					this.ZIM_MERCREDIMFIN = readString(dis);

					this.ZIM_MERCREDIAPDEB = readString(dis);

					this.ZIM_MERCREDIAPFIN = readString(dis);

					this.ZIM_JEUDIMDEB = readString(dis);

					this.ZIM_JEUDIMFIN = readString(dis);

					this.ZIM_JEUDIAPDEB = readString(dis);

					this.ZIM_JEUDIAPFIN = readString(dis);

					this.ZIM_VENDREDIMDEB = readString(dis);

					this.ZIM_VENDREDIMFIN = readString(dis);

					this.ZIM_VENDREDIAPDEB = readString(dis);

					this.ZIM_VENDREDIAPFIN = readString(dis);

					this.ZIM_SAMEDIMDEB = readString(dis);

					this.ZIM_SAMEDIMFIN = readString(dis);

					this.ZIM_SAMEDIAPDEB = readString(dis);

					this.ZIM_SAMEDIAPFIN = readString(dis);

					this.ZIM_DIMANCHEMDEB = readString(dis);

					this.ZIM_DIMANCHEMFIN = readString(dis);

					this.ZIM_DIMANCHEAPDEB = readString(dis);

					this.ZIM_DIMANCHEAPFIN = readString(dis);

					this.ZIM_DATECREATION = readString(dis);

					this.ZIM_DATEMODIF = readDate(dis);

					this.ZIM_CREATEUR = readString(dis);

					this.ZIM_UTILISATEUR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ZIM_ETABLISSEMENT, dos);

				// Integer

				writeInteger(this.ZIM_NUMEROUPSUD, dos);

				// Integer

				writeInteger(this.ZIM_NUMEROMISTRAL, dos);

				// String

				writeString(this.ZIM_NUMUPSUDDISTRI, dos);

				// String

				writeString(this.ZIM_LIBELLE, dos);

				// String

				writeString(this.ZIM_ABREGE, dos);

				// String

				writeString(this.ZIM_ADRESSE1, dos);

				// String

				writeString(this.ZIM_ADRESSE2, dos);

				// String

				writeString(this.ZIM_ADRESSE3, dos);

				// String

				writeString(this.ZIM_CODEPOSTAL, dos);

				// String

				writeString(this.ZIM_VILLE, dos);

				// String

				writeString(this.ZIM_DIVTERRIT, dos);

				// String

				writeString(this.ZIM_PAYS, dos);

				// String

				writeString(this.ZIM_LANGUE, dos);

				// String

				writeString(this.ZIM_TELEPHONE, dos);

				// String

				writeString(this.ZIM_FAX, dos);

				// String

				writeString(this.ZIM_TELEX, dos);

				// String

				writeString(this.ZIM_SOCIETE, dos);

				// String

				writeString(this.ZIM_JURIDIQUE, dos);

				// String

				writeString(this.ZIM_ETABLIE, dos);

				// String

				writeString(this.ZIM_EMAIL, dos);

				// Long

				if (this.ZIM_SIRET == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ZIM_SIRET);
				}

				// String

				writeString(this.ZIM_ACTIVITE, dos);

				// String

				writeString(this.ZIM_APE, dos);

				// Character

				if (this.ZIM_ACTIF == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ZIM_ACTIF);
				}

				// String

				writeString(this.ZIM_CHEFMAGASIN, dos);

				// String

				writeString(this.ZIM_CHEFMAGPORT, dos);

				// String

				writeString(this.ZIM_SECTEUR, dos);

				// String

				writeString(this.ZIM_CHEFSECTEUR, dos);

				// String

				writeString(this.ZIM_CHEFSECTPORT, dos);

				// String

				writeString(this.ZIM_CHEFVENTE, dos);

				// String

				writeString(this.ZIM_CHEFVENTEPORT, dos);

				// String

				writeString(this.ZIM_IPFIXE, dos);

				// String

				writeString(this.ZIM_IDADSL, dos);

				// String

				writeString(this.ZIM_MDPADSL, dos);

				// String

				writeString(this.ZIM_MDPROUTADSL, dos);

				// Integer

				writeInteger(this.ZIM_INSEE, dos);

				// String

				writeString(this.ZIM_REGION, dos);

				// java.util.Date

				writeDate(this.ZIM_DATEOUV, dos);

				// java.util.Date

				writeDate(this.ZIM_DATEFERM, dos);

				// java.util.Date

				writeDate(this.ZIM_DATEUTIL, dos);

				// java.util.Date

				writeDate(this.ZIM_DATEDERRENOV, dos);

				// Integer

				writeInteger(this.ZIM_NBCAISSE, dos);

				// Integer

				writeInteger(this.ZIM_NBTPE, dos);

				// String

				writeString(this.ZIM_TPEMAINT, dos);

				// String

				writeString(this.ZIM_TPEHOTLINE, dos);

				// String

				writeString(this.ZIM_NUMCPTEIPS, dos);

				// String

				writeString(this.ZIM_TPENUMSERIE1, dos);

				// String

				writeString(this.ZIM_TPENUMSERIE2, dos);

				// String

				writeString(this.ZIM_TPENUMSERIE3, dos);

				// Integer

				writeInteger(this.ZIM_NUMDOMBANQUE, dos);

				// String

				writeString(this.ZIM_BANQUETPE, dos);

				// String

				writeString(this.ZIM_BANQUEVERS, dos);

				// String

				writeString(this.ZIM_NUMCOMPTE, dos);

				// String

				writeString(this.ZIM_ADRVERSEMENT, dos);

				// String

				writeString(this.ZIM_CSECTBINOME, dos);

				// String

				writeString(this.ZIM_MDPWEBMISTRAL, dos);

				// String

				writeString(this.ZIM_TYPECAISSE, dos);

				// String

				writeString(this.ZIM_ENSEIGNE, dos);

				// String

				writeString(this.ZIM_ENTREPOTLIVRE, dos);

				// String

				writeString(this.ZIM_ADRFTPMAG, dos);

				// Integer

				writeInteger(this.ZIM_CPTEFTP, dos);

				// Integer

				writeInteger(this.ZIM_MDPFTP, dos);

				// String

				writeString(this.ZIM_CPTETEAMVPC, dos);

				// Integer

				writeInteger(this.ZIM_CPTETEAMVC1, dos);

				// Integer

				writeInteger(this.ZIM_CPTETEAMVC2, dos);

				// String

				writeString(this.ZIM_CPTETEAMVC3, dos);

				// String

				writeString(this.ZIM_MDPTEAMVPC, dos);

				// String

				writeString(this.ZIM_MDPTEAMVC1, dos);

				// String

				writeString(this.ZIM_MDPTEAMVC2, dos);

				// String

				writeString(this.ZIM_MDPTEAMVC3, dos);

				// String

				writeString(this.ZIM_IDCENTRETRAIT, dos);

				// Integer

				writeInteger(this.ZIM_SUPERFVENTE, dos);

				// Integer

				writeInteger(this.ZIM_SUPERFANNEX, dos);

				// Integer

				writeInteger(this.ZIM_PEDF1, dos);

				// Integer

				writeInteger(this.ZIM_PEDF2, dos);

				// Long

				if (this.ZIM_NUMPDL1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ZIM_NUMPDL1);
				}

				// String

				writeString(this.ZIM_NUMPDL2, dos);

				// String

				writeString(this.ZIM_TYPETARIFEDF, dos);

				// String

				writeString(this.ZIM_FOURELEC, dos);

				// Integer

				writeInteger(this.ZIM_SIREN, dos);

				// String

				writeString(this.ZIM_FREQLIVRAISON, dos);

				// String

				writeString(this.ZIM_TELESURVNOM, dos);

				// String

				writeString(this.ZIM_TELESURVCONTAC, dos);

				// String

				writeString(this.ZIM_TELESURVTEL, dos);

				// String

				writeString(this.ZIM_VIDSURVNOM, dos);

				// String

				writeString(this.ZIM_VIDSURVCONTACT, dos);

				// String

				writeString(this.ZIM_VIDSURVTEL, dos);

				// String

				writeString(this.ZIM_CLIMNOM, dos);

				// String

				writeString(this.ZIM_CLIMCONTACT, dos);

				// String

				writeString(this.ZIM_CLIMTEL, dos);

				// String

				writeString(this.ZIM_FROIDPOSNOM, dos);

				// String

				writeString(this.ZIM_FROIDPOSCONTAC, dos);

				// String

				writeString(this.ZIM_FROIDPOSTEL, dos);

				// String

				writeString(this.ZIM_FROIDNEGNOM, dos);

				// String

				writeString(this.ZIM_FROIDNEGCONTAC, dos);

				// String

				writeString(this.ZIM_FROIDNEGTEL, dos);

				// String

				writeString(this.ZIM_ANTIVOLNOM, dos);

				// String

				writeString(this.ZIM_ANTIVOLCONTACT, dos);

				// String

				writeString(this.ZIM_ANTIVOLTEL, dos);

				// String

				writeString(this.ZIM_IPVIDEOSURV, dos);

				// String

				writeString(this.ZIM_PROADMINROUT, dos);

				// String

				writeString(this.ZIM_MDPADMINROUT, dos);

				// String

				writeString(this.ZIM_MAILSECTEUR, dos);

				// String

				writeString(this.ZIM_TIERSSURV, dos);

				// String

				writeString(this.ZIM_TIERSVIDSURV, dos);

				// String

				writeString(this.ZIM_CLIMTIERS, dos);

				// String

				writeString(this.ZIM_ANTIVOLTIERS, dos);

				// String

				writeString(this.ZIM_FROIDPOSTIERS, dos);

				// String

				writeString(this.ZIM_FROIDNEGTIERS, dos);

				// String

				writeString(this.ZIM_FAXCLIM, dos);

				// String

				writeString(this.ZIM_MAILCLIM, dos);

				// String

				writeString(this.ZIM_FAXANTIVOL, dos);

				// String

				writeString(this.ZIM_MAILANTIVOL, dos);

				// String

				writeString(this.ZIM_FAXFROIDPOS, dos);

				// String

				writeString(this.ZIM_MAILFROIDPOS, dos);

				// String

				writeString(this.ZIM_FAXFROIDNEG, dos);

				// String

				writeString(this.ZIM_MAILFROIDNEG, dos);

				// Integer

				writeInteger(this.ZIM_BAILLEURTIERS1, dos);

				// String

				writeString(this.ZIM_BAILLEURRS1, dos);

				// String

				writeString(this.ZIM_BAILLEUR1ADR1, dos);

				// String

				writeString(this.ZIM_BAILLEUR1ADR2, dos);

				// String

				writeString(this.ZIM_BAILLEUR1ADR3, dos);

				// String

				writeString(this.ZIM_BAILLEURCP1, dos);

				// String

				writeString(this.ZIM_BAILLEURVILLE1, dos);

				// String

				writeString(this.ZIM_BAILLEURTEL1, dos);

				// String

				writeString(this.ZIM_BAILLEURFAX1, dos);

				// String

				writeString(this.ZIM_BAILLEURMAIL1, dos);

				// java.util.Date

				writeDate(this.ZIM_DATEBAIL1, dos);

				// String

				writeString(this.ZIM_BAILLEURTIERS2, dos);

				// String

				writeString(this.ZIM_BAILLEURRS2, dos);

				// String

				writeString(this.ZIM_BAILLEUR2ADR1, dos);

				// String

				writeString(this.ZIM_BAILLEUR2ADR2, dos);

				// String

				writeString(this.ZIM_BAILLEUR2ADR3, dos);

				// String

				writeString(this.ZIM_BAILLEURCP2, dos);

				// String

				writeString(this.ZIM_BAILLEURVILLE2, dos);

				// String

				writeString(this.ZIM_BAILLEURTEL2, dos);

				// String

				writeString(this.ZIM_BAILLEURFAX2, dos);

				// String

				writeString(this.ZIM_BAILLEURMAIL2, dos);

				// String

				writeString(this.ZIM_DATEBAIL2, dos);

				// String

				writeString(this.ZIM_BAILLEURTIERS3, dos);

				// String

				writeString(this.ZIM_BAILLEURRS3, dos);

				// String

				writeString(this.ZIM_BAILLEUR3ADR1, dos);

				// String

				writeString(this.ZIM_BAILLEUR3ADR2, dos);

				// String

				writeString(this.ZIM_BAILLEUR3ADR3, dos);

				// String

				writeString(this.ZIM_BAILLEURCP3, dos);

				// String

				writeString(this.ZIM_BAILLEURVILLE3, dos);

				// String

				writeString(this.ZIM_BAILLEURTEL3, dos);

				// String

				writeString(this.ZIM_BAILLEURFAX3, dos);

				// String

				writeString(this.ZIM_BAILLEURMAIL3, dos);

				// String

				writeString(this.ZIM_DATEBAIL3, dos);

				// String

				writeString(this.ZIM_BAILLEURTIERS4, dos);

				// String

				writeString(this.ZIM_BAILLEURRS4, dos);

				// String

				writeString(this.ZIM_BAILLEUR4ADR1, dos);

				// String

				writeString(this.ZIM_BAILLEUR4ADR2, dos);

				// String

				writeString(this.ZIM_BAILLEUR4ADR3, dos);

				// String

				writeString(this.ZIM_BAILLEURCP4, dos);

				// String

				writeString(this.ZIM_BAILLEURVILLE4, dos);

				// String

				writeString(this.ZIM_BAILLEURTEL4, dos);

				// String

				writeString(this.ZIM_BAILLEURFAX4, dos);

				// String

				writeString(this.ZIM_BAILLEURMAIL4, dos);

				// String

				writeString(this.ZIM_DATEBAIL4, dos);

				// String

				writeString(this.ZIM_SYNDIC, dos);

				// String

				writeString(this.ZIM_SYNDICRS, dos);

				// String

				writeString(this.ZIM_SYNDICADR1, dos);

				// String

				writeString(this.ZIM_SYNDICADR2, dos);

				// String

				writeString(this.ZIM_SYNDICADR3, dos);

				// String

				writeString(this.ZIM_SYNDICCP, dos);

				// String

				writeString(this.ZIM_SYNDICVILLE, dos);

				// String

				writeString(this.ZIM_SYNDICTEL, dos);

				// String

				writeString(this.ZIM_SYNDICFAX, dos);

				// String

				writeString(this.ZIM_SYNDICMAIL, dos);

				// String

				writeString(this.ZIM_LUNDIMDEB, dos);

				// String

				writeString(this.ZIM_LUNDIMFIN, dos);

				// String

				writeString(this.ZIM_LUNDIAPDEB, dos);

				// String

				writeString(this.ZIM_LUNDIAPFIN, dos);

				// String

				writeString(this.ZIM_MARDIMDEB, dos);

				// String

				writeString(this.ZIM_MARDIMFIN, dos);

				// String

				writeString(this.ZIM_MARDIAPDEB, dos);

				// String

				writeString(this.ZIM_MARDIAPFIN, dos);

				// String

				writeString(this.ZIM_MERCREDIMDEB, dos);

				// String

				writeString(this.ZIM_MERCREDIMFIN, dos);

				// String

				writeString(this.ZIM_MERCREDIAPDEB, dos);

				// String

				writeString(this.ZIM_MERCREDIAPFIN, dos);

				// String

				writeString(this.ZIM_JEUDIMDEB, dos);

				// String

				writeString(this.ZIM_JEUDIMFIN, dos);

				// String

				writeString(this.ZIM_JEUDIAPDEB, dos);

				// String

				writeString(this.ZIM_JEUDIAPFIN, dos);

				// String

				writeString(this.ZIM_VENDREDIMDEB, dos);

				// String

				writeString(this.ZIM_VENDREDIMFIN, dos);

				// String

				writeString(this.ZIM_VENDREDIAPDEB, dos);

				// String

				writeString(this.ZIM_VENDREDIAPFIN, dos);

				// String

				writeString(this.ZIM_SAMEDIMDEB, dos);

				// String

				writeString(this.ZIM_SAMEDIMFIN, dos);

				// String

				writeString(this.ZIM_SAMEDIAPDEB, dos);

				// String

				writeString(this.ZIM_SAMEDIAPFIN, dos);

				// String

				writeString(this.ZIM_DIMANCHEMDEB, dos);

				// String

				writeString(this.ZIM_DIMANCHEMFIN, dos);

				// String

				writeString(this.ZIM_DIMANCHEAPDEB, dos);

				// String

				writeString(this.ZIM_DIMANCHEAPFIN, dos);

				// String

				writeString(this.ZIM_DATECREATION, dos);

				// java.util.Date

				writeDate(this.ZIM_DATEMODIF, dos);

				// String

				writeString(this.ZIM_CREATEUR, dos);

				// String

				writeString(this.ZIM_UTILISATEUR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ZIM_ETABLISSEMENT=" + ZIM_ETABLISSEMENT);
			sb.append(",ZIM_NUMEROUPSUD=" + String.valueOf(ZIM_NUMEROUPSUD));
			sb.append(",ZIM_NUMEROMISTRAL=" + String.valueOf(ZIM_NUMEROMISTRAL));
			sb.append(",ZIM_NUMUPSUDDISTRI=" + ZIM_NUMUPSUDDISTRI);
			sb.append(",ZIM_LIBELLE=" + ZIM_LIBELLE);
			sb.append(",ZIM_ABREGE=" + ZIM_ABREGE);
			sb.append(",ZIM_ADRESSE1=" + ZIM_ADRESSE1);
			sb.append(",ZIM_ADRESSE2=" + ZIM_ADRESSE2);
			sb.append(",ZIM_ADRESSE3=" + ZIM_ADRESSE3);
			sb.append(",ZIM_CODEPOSTAL=" + ZIM_CODEPOSTAL);
			sb.append(",ZIM_VILLE=" + ZIM_VILLE);
			sb.append(",ZIM_DIVTERRIT=" + ZIM_DIVTERRIT);
			sb.append(",ZIM_PAYS=" + ZIM_PAYS);
			sb.append(",ZIM_LANGUE=" + ZIM_LANGUE);
			sb.append(",ZIM_TELEPHONE=" + ZIM_TELEPHONE);
			sb.append(",ZIM_FAX=" + ZIM_FAX);
			sb.append(",ZIM_TELEX=" + ZIM_TELEX);
			sb.append(",ZIM_SOCIETE=" + ZIM_SOCIETE);
			sb.append(",ZIM_JURIDIQUE=" + ZIM_JURIDIQUE);
			sb.append(",ZIM_ETABLIE=" + ZIM_ETABLIE);
			sb.append(",ZIM_EMAIL=" + ZIM_EMAIL);
			sb.append(",ZIM_SIRET=" + String.valueOf(ZIM_SIRET));
			sb.append(",ZIM_ACTIVITE=" + ZIM_ACTIVITE);
			sb.append(",ZIM_APE=" + ZIM_APE);
			sb.append(",ZIM_ACTIF=" + String.valueOf(ZIM_ACTIF));
			sb.append(",ZIM_CHEFMAGASIN=" + ZIM_CHEFMAGASIN);
			sb.append(",ZIM_CHEFMAGPORT=" + ZIM_CHEFMAGPORT);
			sb.append(",ZIM_SECTEUR=" + ZIM_SECTEUR);
			sb.append(",ZIM_CHEFSECTEUR=" + ZIM_CHEFSECTEUR);
			sb.append(",ZIM_CHEFSECTPORT=" + ZIM_CHEFSECTPORT);
			sb.append(",ZIM_CHEFVENTE=" + ZIM_CHEFVENTE);
			sb.append(",ZIM_CHEFVENTEPORT=" + ZIM_CHEFVENTEPORT);
			sb.append(",ZIM_IPFIXE=" + ZIM_IPFIXE);
			sb.append(",ZIM_IDADSL=" + ZIM_IDADSL);
			sb.append(",ZIM_MDPADSL=" + ZIM_MDPADSL);
			sb.append(",ZIM_MDPROUTADSL=" + ZIM_MDPROUTADSL);
			sb.append(",ZIM_INSEE=" + String.valueOf(ZIM_INSEE));
			sb.append(",ZIM_REGION=" + ZIM_REGION);
			sb.append(",ZIM_DATEOUV=" + String.valueOf(ZIM_DATEOUV));
			sb.append(",ZIM_DATEFERM=" + String.valueOf(ZIM_DATEFERM));
			sb.append(",ZIM_DATEUTIL=" + String.valueOf(ZIM_DATEUTIL));
			sb.append(",ZIM_DATEDERRENOV=" + String.valueOf(ZIM_DATEDERRENOV));
			sb.append(",ZIM_NBCAISSE=" + String.valueOf(ZIM_NBCAISSE));
			sb.append(",ZIM_NBTPE=" + String.valueOf(ZIM_NBTPE));
			sb.append(",ZIM_TPEMAINT=" + ZIM_TPEMAINT);
			sb.append(",ZIM_TPEHOTLINE=" + ZIM_TPEHOTLINE);
			sb.append(",ZIM_NUMCPTEIPS=" + ZIM_NUMCPTEIPS);
			sb.append(",ZIM_TPENUMSERIE1=" + ZIM_TPENUMSERIE1);
			sb.append(",ZIM_TPENUMSERIE2=" + ZIM_TPENUMSERIE2);
			sb.append(",ZIM_TPENUMSERIE3=" + ZIM_TPENUMSERIE3);
			sb.append(",ZIM_NUMDOMBANQUE=" + String.valueOf(ZIM_NUMDOMBANQUE));
			sb.append(",ZIM_BANQUETPE=" + ZIM_BANQUETPE);
			sb.append(",ZIM_BANQUEVERS=" + ZIM_BANQUEVERS);
			sb.append(",ZIM_NUMCOMPTE=" + ZIM_NUMCOMPTE);
			sb.append(",ZIM_ADRVERSEMENT=" + ZIM_ADRVERSEMENT);
			sb.append(",ZIM_CSECTBINOME=" + ZIM_CSECTBINOME);
			sb.append(",ZIM_MDPWEBMISTRAL=" + ZIM_MDPWEBMISTRAL);
			sb.append(",ZIM_TYPECAISSE=" + ZIM_TYPECAISSE);
			sb.append(",ZIM_ENSEIGNE=" + ZIM_ENSEIGNE);
			sb.append(",ZIM_ENTREPOTLIVRE=" + ZIM_ENTREPOTLIVRE);
			sb.append(",ZIM_ADRFTPMAG=" + ZIM_ADRFTPMAG);
			sb.append(",ZIM_CPTEFTP=" + String.valueOf(ZIM_CPTEFTP));
			sb.append(",ZIM_MDPFTP=" + String.valueOf(ZIM_MDPFTP));
			sb.append(",ZIM_CPTETEAMVPC=" + ZIM_CPTETEAMVPC);
			sb.append(",ZIM_CPTETEAMVC1=" + String.valueOf(ZIM_CPTETEAMVC1));
			sb.append(",ZIM_CPTETEAMVC2=" + String.valueOf(ZIM_CPTETEAMVC2));
			sb.append(",ZIM_CPTETEAMVC3=" + ZIM_CPTETEAMVC3);
			sb.append(",ZIM_MDPTEAMVPC=" + ZIM_MDPTEAMVPC);
			sb.append(",ZIM_MDPTEAMVC1=" + ZIM_MDPTEAMVC1);
			sb.append(",ZIM_MDPTEAMVC2=" + ZIM_MDPTEAMVC2);
			sb.append(",ZIM_MDPTEAMVC3=" + ZIM_MDPTEAMVC3);
			sb.append(",ZIM_IDCENTRETRAIT=" + ZIM_IDCENTRETRAIT);
			sb.append(",ZIM_SUPERFVENTE=" + String.valueOf(ZIM_SUPERFVENTE));
			sb.append(",ZIM_SUPERFANNEX=" + String.valueOf(ZIM_SUPERFANNEX));
			sb.append(",ZIM_PEDF1=" + String.valueOf(ZIM_PEDF1));
			sb.append(",ZIM_PEDF2=" + String.valueOf(ZIM_PEDF2));
			sb.append(",ZIM_NUMPDL1=" + String.valueOf(ZIM_NUMPDL1));
			sb.append(",ZIM_NUMPDL2=" + ZIM_NUMPDL2);
			sb.append(",ZIM_TYPETARIFEDF=" + ZIM_TYPETARIFEDF);
			sb.append(",ZIM_FOURELEC=" + ZIM_FOURELEC);
			sb.append(",ZIM_SIREN=" + String.valueOf(ZIM_SIREN));
			sb.append(",ZIM_FREQLIVRAISON=" + ZIM_FREQLIVRAISON);
			sb.append(",ZIM_TELESURVNOM=" + ZIM_TELESURVNOM);
			sb.append(",ZIM_TELESURVCONTAC=" + ZIM_TELESURVCONTAC);
			sb.append(",ZIM_TELESURVTEL=" + ZIM_TELESURVTEL);
			sb.append(",ZIM_VIDSURVNOM=" + ZIM_VIDSURVNOM);
			sb.append(",ZIM_VIDSURVCONTACT=" + ZIM_VIDSURVCONTACT);
			sb.append(",ZIM_VIDSURVTEL=" + ZIM_VIDSURVTEL);
			sb.append(",ZIM_CLIMNOM=" + ZIM_CLIMNOM);
			sb.append(",ZIM_CLIMCONTACT=" + ZIM_CLIMCONTACT);
			sb.append(",ZIM_CLIMTEL=" + ZIM_CLIMTEL);
			sb.append(",ZIM_FROIDPOSNOM=" + ZIM_FROIDPOSNOM);
			sb.append(",ZIM_FROIDPOSCONTAC=" + ZIM_FROIDPOSCONTAC);
			sb.append(",ZIM_FROIDPOSTEL=" + ZIM_FROIDPOSTEL);
			sb.append(",ZIM_FROIDNEGNOM=" + ZIM_FROIDNEGNOM);
			sb.append(",ZIM_FROIDNEGCONTAC=" + ZIM_FROIDNEGCONTAC);
			sb.append(",ZIM_FROIDNEGTEL=" + ZIM_FROIDNEGTEL);
			sb.append(",ZIM_ANTIVOLNOM=" + ZIM_ANTIVOLNOM);
			sb.append(",ZIM_ANTIVOLCONTACT=" + ZIM_ANTIVOLCONTACT);
			sb.append(",ZIM_ANTIVOLTEL=" + ZIM_ANTIVOLTEL);
			sb.append(",ZIM_IPVIDEOSURV=" + ZIM_IPVIDEOSURV);
			sb.append(",ZIM_PROADMINROUT=" + ZIM_PROADMINROUT);
			sb.append(",ZIM_MDPADMINROUT=" + ZIM_MDPADMINROUT);
			sb.append(",ZIM_MAILSECTEUR=" + ZIM_MAILSECTEUR);
			sb.append(",ZIM_TIERSSURV=" + ZIM_TIERSSURV);
			sb.append(",ZIM_TIERSVIDSURV=" + ZIM_TIERSVIDSURV);
			sb.append(",ZIM_CLIMTIERS=" + ZIM_CLIMTIERS);
			sb.append(",ZIM_ANTIVOLTIERS=" + ZIM_ANTIVOLTIERS);
			sb.append(",ZIM_FROIDPOSTIERS=" + ZIM_FROIDPOSTIERS);
			sb.append(",ZIM_FROIDNEGTIERS=" + ZIM_FROIDNEGTIERS);
			sb.append(",ZIM_FAXCLIM=" + ZIM_FAXCLIM);
			sb.append(",ZIM_MAILCLIM=" + ZIM_MAILCLIM);
			sb.append(",ZIM_FAXANTIVOL=" + ZIM_FAXANTIVOL);
			sb.append(",ZIM_MAILANTIVOL=" + ZIM_MAILANTIVOL);
			sb.append(",ZIM_FAXFROIDPOS=" + ZIM_FAXFROIDPOS);
			sb.append(",ZIM_MAILFROIDPOS=" + ZIM_MAILFROIDPOS);
			sb.append(",ZIM_FAXFROIDNEG=" + ZIM_FAXFROIDNEG);
			sb.append(",ZIM_MAILFROIDNEG=" + ZIM_MAILFROIDNEG);
			sb.append(",ZIM_BAILLEURTIERS1=" + String.valueOf(ZIM_BAILLEURTIERS1));
			sb.append(",ZIM_BAILLEURRS1=" + ZIM_BAILLEURRS1);
			sb.append(",ZIM_BAILLEUR1ADR1=" + ZIM_BAILLEUR1ADR1);
			sb.append(",ZIM_BAILLEUR1ADR2=" + ZIM_BAILLEUR1ADR2);
			sb.append(",ZIM_BAILLEUR1ADR3=" + ZIM_BAILLEUR1ADR3);
			sb.append(",ZIM_BAILLEURCP1=" + ZIM_BAILLEURCP1);
			sb.append(",ZIM_BAILLEURVILLE1=" + ZIM_BAILLEURVILLE1);
			sb.append(",ZIM_BAILLEURTEL1=" + ZIM_BAILLEURTEL1);
			sb.append(",ZIM_BAILLEURFAX1=" + ZIM_BAILLEURFAX1);
			sb.append(",ZIM_BAILLEURMAIL1=" + ZIM_BAILLEURMAIL1);
			sb.append(",ZIM_DATEBAIL1=" + String.valueOf(ZIM_DATEBAIL1));
			sb.append(",ZIM_BAILLEURTIERS2=" + ZIM_BAILLEURTIERS2);
			sb.append(",ZIM_BAILLEURRS2=" + ZIM_BAILLEURRS2);
			sb.append(",ZIM_BAILLEUR2ADR1=" + ZIM_BAILLEUR2ADR1);
			sb.append(",ZIM_BAILLEUR2ADR2=" + ZIM_BAILLEUR2ADR2);
			sb.append(",ZIM_BAILLEUR2ADR3=" + ZIM_BAILLEUR2ADR3);
			sb.append(",ZIM_BAILLEURCP2=" + ZIM_BAILLEURCP2);
			sb.append(",ZIM_BAILLEURVILLE2=" + ZIM_BAILLEURVILLE2);
			sb.append(",ZIM_BAILLEURTEL2=" + ZIM_BAILLEURTEL2);
			sb.append(",ZIM_BAILLEURFAX2=" + ZIM_BAILLEURFAX2);
			sb.append(",ZIM_BAILLEURMAIL2=" + ZIM_BAILLEURMAIL2);
			sb.append(",ZIM_DATEBAIL2=" + ZIM_DATEBAIL2);
			sb.append(",ZIM_BAILLEURTIERS3=" + ZIM_BAILLEURTIERS3);
			sb.append(",ZIM_BAILLEURRS3=" + ZIM_BAILLEURRS3);
			sb.append(",ZIM_BAILLEUR3ADR1=" + ZIM_BAILLEUR3ADR1);
			sb.append(",ZIM_BAILLEUR3ADR2=" + ZIM_BAILLEUR3ADR2);
			sb.append(",ZIM_BAILLEUR3ADR3=" + ZIM_BAILLEUR3ADR3);
			sb.append(",ZIM_BAILLEURCP3=" + ZIM_BAILLEURCP3);
			sb.append(",ZIM_BAILLEURVILLE3=" + ZIM_BAILLEURVILLE3);
			sb.append(",ZIM_BAILLEURTEL3=" + ZIM_BAILLEURTEL3);
			sb.append(",ZIM_BAILLEURFAX3=" + ZIM_BAILLEURFAX3);
			sb.append(",ZIM_BAILLEURMAIL3=" + ZIM_BAILLEURMAIL3);
			sb.append(",ZIM_DATEBAIL3=" + ZIM_DATEBAIL3);
			sb.append(",ZIM_BAILLEURTIERS4=" + ZIM_BAILLEURTIERS4);
			sb.append(",ZIM_BAILLEURRS4=" + ZIM_BAILLEURRS4);
			sb.append(",ZIM_BAILLEUR4ADR1=" + ZIM_BAILLEUR4ADR1);
			sb.append(",ZIM_BAILLEUR4ADR2=" + ZIM_BAILLEUR4ADR2);
			sb.append(",ZIM_BAILLEUR4ADR3=" + ZIM_BAILLEUR4ADR3);
			sb.append(",ZIM_BAILLEURCP4=" + ZIM_BAILLEURCP4);
			sb.append(",ZIM_BAILLEURVILLE4=" + ZIM_BAILLEURVILLE4);
			sb.append(",ZIM_BAILLEURTEL4=" + ZIM_BAILLEURTEL4);
			sb.append(",ZIM_BAILLEURFAX4=" + ZIM_BAILLEURFAX4);
			sb.append(",ZIM_BAILLEURMAIL4=" + ZIM_BAILLEURMAIL4);
			sb.append(",ZIM_DATEBAIL4=" + ZIM_DATEBAIL4);
			sb.append(",ZIM_SYNDIC=" + ZIM_SYNDIC);
			sb.append(",ZIM_SYNDICRS=" + ZIM_SYNDICRS);
			sb.append(",ZIM_SYNDICADR1=" + ZIM_SYNDICADR1);
			sb.append(",ZIM_SYNDICADR2=" + ZIM_SYNDICADR2);
			sb.append(",ZIM_SYNDICADR3=" + ZIM_SYNDICADR3);
			sb.append(",ZIM_SYNDICCP=" + ZIM_SYNDICCP);
			sb.append(",ZIM_SYNDICVILLE=" + ZIM_SYNDICVILLE);
			sb.append(",ZIM_SYNDICTEL=" + ZIM_SYNDICTEL);
			sb.append(",ZIM_SYNDICFAX=" + ZIM_SYNDICFAX);
			sb.append(",ZIM_SYNDICMAIL=" + ZIM_SYNDICMAIL);
			sb.append(",ZIM_LUNDIMDEB=" + ZIM_LUNDIMDEB);
			sb.append(",ZIM_LUNDIMFIN=" + ZIM_LUNDIMFIN);
			sb.append(",ZIM_LUNDIAPDEB=" + ZIM_LUNDIAPDEB);
			sb.append(",ZIM_LUNDIAPFIN=" + ZIM_LUNDIAPFIN);
			sb.append(",ZIM_MARDIMDEB=" + ZIM_MARDIMDEB);
			sb.append(",ZIM_MARDIMFIN=" + ZIM_MARDIMFIN);
			sb.append(",ZIM_MARDIAPDEB=" + ZIM_MARDIAPDEB);
			sb.append(",ZIM_MARDIAPFIN=" + ZIM_MARDIAPFIN);
			sb.append(",ZIM_MERCREDIMDEB=" + ZIM_MERCREDIMDEB);
			sb.append(",ZIM_MERCREDIMFIN=" + ZIM_MERCREDIMFIN);
			sb.append(",ZIM_MERCREDIAPDEB=" + ZIM_MERCREDIAPDEB);
			sb.append(",ZIM_MERCREDIAPFIN=" + ZIM_MERCREDIAPFIN);
			sb.append(",ZIM_JEUDIMDEB=" + ZIM_JEUDIMDEB);
			sb.append(",ZIM_JEUDIMFIN=" + ZIM_JEUDIMFIN);
			sb.append(",ZIM_JEUDIAPDEB=" + ZIM_JEUDIAPDEB);
			sb.append(",ZIM_JEUDIAPFIN=" + ZIM_JEUDIAPFIN);
			sb.append(",ZIM_VENDREDIMDEB=" + ZIM_VENDREDIMDEB);
			sb.append(",ZIM_VENDREDIMFIN=" + ZIM_VENDREDIMFIN);
			sb.append(",ZIM_VENDREDIAPDEB=" + ZIM_VENDREDIAPDEB);
			sb.append(",ZIM_VENDREDIAPFIN=" + ZIM_VENDREDIAPFIN);
			sb.append(",ZIM_SAMEDIMDEB=" + ZIM_SAMEDIMDEB);
			sb.append(",ZIM_SAMEDIMFIN=" + ZIM_SAMEDIMFIN);
			sb.append(",ZIM_SAMEDIAPDEB=" + ZIM_SAMEDIAPDEB);
			sb.append(",ZIM_SAMEDIAPFIN=" + ZIM_SAMEDIAPFIN);
			sb.append(",ZIM_DIMANCHEMDEB=" + ZIM_DIMANCHEMDEB);
			sb.append(",ZIM_DIMANCHEMFIN=" + ZIM_DIMANCHEMFIN);
			sb.append(",ZIM_DIMANCHEAPDEB=" + ZIM_DIMANCHEAPDEB);
			sb.append(",ZIM_DIMANCHEAPFIN=" + ZIM_DIMANCHEAPFIN);
			sb.append(",ZIM_DATECREATION=" + ZIM_DATECREATION);
			sb.append(",ZIM_DATEMODIF=" + String.valueOf(ZIM_DATEMODIF));
			sb.append(",ZIM_CREATEUR=" + ZIM_CREATEUR);
			sb.append(",ZIM_UTILISATEUR=" + ZIM_UTILISATEUR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				dim_magasinStruct dim_magasin = new dim_magasinStruct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("dim_magasin" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "magasin";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int count_tDBOutput_1 = 0;

				String insert_tDBOutput_1 = "INSERT INTO `" + "magasin"
						+ "` (`code_etablissement`,`adresse`,`code_postal`,`ville`) VALUES (?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						if (execStat) {
							runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
						}

					}
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				dim_magasinStruct dim_magasin_tmp = new dim_magasinStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				class RowHelper_tFileInputDelimited_1 {

					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							row1Struct row1) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_1 = 0;

						String temp = "";

						columnIndexWithD_tFileInputDelimited_1 = 0;

						row1.ZIM_ETABLISSEMENT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 1;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_NUMEROUPSUD = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_NUMEROUPSUD", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_NUMEROUPSUD = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 2;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_NUMEROMISTRAL = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_NUMEROMISTRAL", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_NUMEROMISTRAL = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 3;

						row1.ZIM_NUMUPSUDDISTRI = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 4;

						row1.ZIM_LIBELLE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 5;

						row1.ZIM_ABREGE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 6;

						row1.ZIM_ADRESSE1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 7;

						row1.ZIM_ADRESSE2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 8;

						row1.ZIM_ADRESSE3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 9;

						row1.ZIM_CODEPOSTAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 10;

						row1.ZIM_VILLE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 11;

						row1.ZIM_DIVTERRIT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 12;

						row1.ZIM_PAYS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 13;

						row1.ZIM_LANGUE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 14;

						row1.ZIM_TELEPHONE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 15;

						row1.ZIM_FAX = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 16;

						row1.ZIM_TELEX = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 17;

						row1.ZIM_SOCIETE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 18;

						row1.ZIM_JURIDIQUE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 19;

						row1.ZIM_ETABLIE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 20;

						row1.ZIM_EMAIL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 21;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_SIRET = ParserUtils.parseTo_Long(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_SIRET", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_SIRET = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 22;

						row1.ZIM_ACTIVITE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 23;

						row1.ZIM_APE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 24;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_ACTIF = ParserUtils.parseTo_Character(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_ACTIF", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_ACTIF = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 25;

						row1.ZIM_CHEFMAGASIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 26;

						row1.ZIM_CHEFMAGPORT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 27;

						row1.ZIM_SECTEUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 28;

						row1.ZIM_CHEFSECTEUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 29;

						row1.ZIM_CHEFSECTPORT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 30;

						row1.ZIM_CHEFVENTE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 31;

						row1.ZIM_CHEFVENTEPORT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 32;

						row1.ZIM_IPFIXE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 33;

						row1.ZIM_IDADSL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 34;

						row1.ZIM_MDPADSL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 35;

						row1.ZIM_MDPROUTADSL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 36;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_INSEE = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_INSEE", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_INSEE = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 37;

						row1.ZIM_REGION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 38;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_DATEOUV = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_DATEOUV", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_DATEOUV = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 39;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_DATEFERM = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_DATEFERM", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_DATEFERM = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 40;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_DATEUTIL = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_DATEUTIL", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_DATEUTIL = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 41;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_DATEDERRENOV = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_DATEDERRENOV", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_DATEDERRENOV = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 42;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_NBCAISSE = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_NBCAISSE", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_NBCAISSE = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 43;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_NBTPE = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_NBTPE", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_NBTPE = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 44;

						row1.ZIM_TPEMAINT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 45;

						row1.ZIM_TPEHOTLINE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 46;

						row1.ZIM_NUMCPTEIPS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 47;

						row1.ZIM_TPENUMSERIE1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 48;

						row1.ZIM_TPENUMSERIE2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 49;

						row1.ZIM_TPENUMSERIE3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 50;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_NUMDOMBANQUE = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_NUMDOMBANQUE", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_NUMDOMBANQUE = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 51;

						row1.ZIM_BANQUETPE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 52;

						row1.ZIM_BANQUEVERS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 53;

						row1.ZIM_NUMCOMPTE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 54;

						row1.ZIM_ADRVERSEMENT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 55;

						row1.ZIM_CSECTBINOME = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 56;

						row1.ZIM_MDPWEBMISTRAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 57;

						row1.ZIM_TYPECAISSE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 58;

						row1.ZIM_ENSEIGNE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 59;

						row1.ZIM_ENTREPOTLIVRE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 60;

						row1.ZIM_ADRFTPMAG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 61;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_CPTEFTP = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_CPTEFTP", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_CPTEFTP = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 62;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_MDPFTP = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_MDPFTP", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_MDPFTP = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 63;

						row1.ZIM_CPTETEAMVPC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 64;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_CPTETEAMVC1 = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_CPTETEAMVC1", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_CPTETEAMVC1 = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 65;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_CPTETEAMVC2 = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_CPTETEAMVC2", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_CPTETEAMVC2 = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 66;

						row1.ZIM_CPTETEAMVC3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 67;

						row1.ZIM_MDPTEAMVPC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 68;

						row1.ZIM_MDPTEAMVC1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 69;

						row1.ZIM_MDPTEAMVC2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 70;

						row1.ZIM_MDPTEAMVC3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 71;

						row1.ZIM_IDCENTRETRAIT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 72;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_SUPERFVENTE = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_SUPERFVENTE", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_SUPERFVENTE = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 73;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_SUPERFANNEX = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_SUPERFANNEX", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_SUPERFANNEX = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 74;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_PEDF1 = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_PEDF1", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_PEDF1 = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 75;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_PEDF2 = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_PEDF2", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_PEDF2 = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 76;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_NUMPDL1 = ParserUtils.parseTo_Long(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_NUMPDL1", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_NUMPDL1 = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 77;

						row1.ZIM_NUMPDL2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 78;

						row1.ZIM_TYPETARIFEDF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 79;

						row1.ZIM_FOURELEC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 80;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_SIREN = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_SIREN", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_SIREN = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 81;

						row1.ZIM_FREQLIVRAISON = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 82;

						row1.ZIM_TELESURVNOM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 83;

						row1.ZIM_TELESURVCONTAC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 84;

						row1.ZIM_TELESURVTEL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 85;

						row1.ZIM_VIDSURVNOM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 86;

						row1.ZIM_VIDSURVCONTACT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 87;

						row1.ZIM_VIDSURVTEL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 88;

						row1.ZIM_CLIMNOM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 89;

						row1.ZIM_CLIMCONTACT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 90;

						row1.ZIM_CLIMTEL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 91;

						row1.ZIM_FROIDPOSNOM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 92;

						row1.ZIM_FROIDPOSCONTAC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 93;

						row1.ZIM_FROIDPOSTEL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 94;

						row1.ZIM_FROIDNEGNOM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 95;

						row1.ZIM_FROIDNEGCONTAC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 96;

						row1.ZIM_FROIDNEGTEL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 97;

						row1.ZIM_ANTIVOLNOM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 98;

						row1.ZIM_ANTIVOLCONTACT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 99;

						row1.ZIM_ANTIVOLTEL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

					}

					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							row1Struct row1) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_1 = 0;

						String temp = "";

						columnIndexWithD_tFileInputDelimited_1 = 100;

						row1.ZIM_IPVIDEOSURV = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 101;

						row1.ZIM_PROADMINROUT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 102;

						row1.ZIM_MDPADMINROUT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 103;

						row1.ZIM_MAILSECTEUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 104;

						row1.ZIM_TIERSSURV = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 105;

						row1.ZIM_TIERSVIDSURV = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 106;

						row1.ZIM_CLIMTIERS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 107;

						row1.ZIM_ANTIVOLTIERS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 108;

						row1.ZIM_FROIDPOSTIERS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 109;

						row1.ZIM_FROIDNEGTIERS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 110;

						row1.ZIM_FAXCLIM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 111;

						row1.ZIM_MAILCLIM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 112;

						row1.ZIM_FAXANTIVOL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 113;

						row1.ZIM_MAILANTIVOL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 114;

						row1.ZIM_FAXFROIDPOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 115;

						row1.ZIM_MAILFROIDPOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 116;

						row1.ZIM_FAXFROIDNEG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 117;

						row1.ZIM_MAILFROIDNEG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 118;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_BAILLEURTIERS1 = ParserUtils.parseTo_Integer(temp);

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_BAILLEURTIERS1", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_BAILLEURTIERS1 = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 119;

						row1.ZIM_BAILLEURRS1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 120;

						row1.ZIM_BAILLEUR1ADR1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 121;

						row1.ZIM_BAILLEUR1ADR2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 122;

						row1.ZIM_BAILLEUR1ADR3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 123;

						row1.ZIM_BAILLEURCP1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 124;

						row1.ZIM_BAILLEURVILLE1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 125;

						row1.ZIM_BAILLEURTEL1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 126;

						row1.ZIM_BAILLEURFAX1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 127;

						row1.ZIM_BAILLEURMAIL1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 128;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_DATEBAIL1 = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_DATEBAIL1", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_DATEBAIL1 = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 129;

						row1.ZIM_BAILLEURTIERS2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 130;

						row1.ZIM_BAILLEURRS2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 131;

						row1.ZIM_BAILLEUR2ADR1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 132;

						row1.ZIM_BAILLEUR2ADR2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 133;

						row1.ZIM_BAILLEUR2ADR3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 134;

						row1.ZIM_BAILLEURCP2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 135;

						row1.ZIM_BAILLEURVILLE2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 136;

						row1.ZIM_BAILLEURTEL2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 137;

						row1.ZIM_BAILLEURFAX2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 138;

						row1.ZIM_BAILLEURMAIL2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 139;

						row1.ZIM_DATEBAIL2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 140;

						row1.ZIM_BAILLEURTIERS3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 141;

						row1.ZIM_BAILLEURRS3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 142;

						row1.ZIM_BAILLEUR3ADR1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 143;

						row1.ZIM_BAILLEUR3ADR2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 144;

						row1.ZIM_BAILLEUR3ADR3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 145;

						row1.ZIM_BAILLEURCP3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 146;

						row1.ZIM_BAILLEURVILLE3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 147;

						row1.ZIM_BAILLEURTEL3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 148;

						row1.ZIM_BAILLEURFAX3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 149;

						row1.ZIM_BAILLEURMAIL3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 150;

						row1.ZIM_DATEBAIL3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 151;

						row1.ZIM_BAILLEURTIERS4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 152;

						row1.ZIM_BAILLEURRS4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 153;

						row1.ZIM_BAILLEUR4ADR1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 154;

						row1.ZIM_BAILLEUR4ADR2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 155;

						row1.ZIM_BAILLEUR4ADR3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 156;

						row1.ZIM_BAILLEURCP4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 157;

						row1.ZIM_BAILLEURVILLE4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 158;

						row1.ZIM_BAILLEURTEL4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 159;

						row1.ZIM_BAILLEURFAX4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 160;

						row1.ZIM_BAILLEURMAIL4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 161;

						row1.ZIM_DATEBAIL4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 162;

						row1.ZIM_SYNDIC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 163;

						row1.ZIM_SYNDICRS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 164;

						row1.ZIM_SYNDICADR1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 165;

						row1.ZIM_SYNDICADR2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 166;

						row1.ZIM_SYNDICADR3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 167;

						row1.ZIM_SYNDICCP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 168;

						row1.ZIM_SYNDICVILLE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 169;

						row1.ZIM_SYNDICTEL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 170;

						row1.ZIM_SYNDICFAX = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 171;

						row1.ZIM_SYNDICMAIL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 172;

						row1.ZIM_LUNDIMDEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 173;

						row1.ZIM_LUNDIMFIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 174;

						row1.ZIM_LUNDIAPDEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 175;

						row1.ZIM_LUNDIAPFIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 176;

						row1.ZIM_MARDIMDEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 177;

						row1.ZIM_MARDIMFIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 178;

						row1.ZIM_MARDIAPDEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 179;

						row1.ZIM_MARDIAPFIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 180;

						row1.ZIM_MERCREDIMDEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 181;

						row1.ZIM_MERCREDIMFIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 182;

						row1.ZIM_MERCREDIAPDEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 183;

						row1.ZIM_MERCREDIAPFIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 184;

						row1.ZIM_JEUDIMDEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 185;

						row1.ZIM_JEUDIMFIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 186;

						row1.ZIM_JEUDIAPDEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 187;

						row1.ZIM_JEUDIAPFIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 188;

						row1.ZIM_VENDREDIMDEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 189;

						row1.ZIM_VENDREDIMFIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 190;

						row1.ZIM_VENDREDIAPDEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 191;

						row1.ZIM_VENDREDIAPFIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 192;

						row1.ZIM_SAMEDIMDEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 193;

						row1.ZIM_SAMEDIMFIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 194;

						row1.ZIM_SAMEDIAPDEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 195;

						row1.ZIM_SAMEDIAPFIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 196;

						row1.ZIM_DIMANCHEMDEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 197;

						row1.ZIM_DIMANCHEMFIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 198;

						row1.ZIM_DIMANCHEAPDEB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 199;

						row1.ZIM_DIMANCHEAPFIN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

					}

					public void valueToConn_2(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							row1Struct row1) throws java.lang.Exception {

						int columnIndexWithD_tFileInputDelimited_1 = 0;

						String temp = "";

						columnIndexWithD_tFileInputDelimited_1 = 200;

						row1.ZIM_DATECREATION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 201;

						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if (temp.length() > 0) {

							try {

								row1.ZIM_DATEMODIF = ParserUtils.parseTo_Date(temp, "yyyy-MM-dd HH:mm:ss");

							} catch (java.lang.Exception ex_tFileInputDelimited_1) {
								rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
										"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ZIM_DATEMODIF", "row1", temp, ex_tFileInputDelimited_1),
										ex_tFileInputDelimited_1));
							}

						} else {

							row1.ZIM_DATEMODIF = null;

						}

						columnIndexWithD_tFileInputDelimited_1 = 202;

						row1.ZIM_CREATEUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

						columnIndexWithD_tFileInputDelimited_1 = 203;

						row1.ZIM_UTILISATEUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

					}

					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,
							row1Struct row1) throws java.lang.Exception {

						valueToConn_0(fid_tFileInputDelimited_1, row1);

						valueToConn_1(fid_tFileInputDelimited_1, row1);

						valueToConn_2(fid_tFileInputDelimited_1, row1);

					}

				}
				RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1 = new RowHelper_tFileInputDelimited_1();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/deric/Documents/Formation DTA Ingénierie/Projet magasin distribution/Sujet/données/MAGASINS.txt";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/deric/Documents/Formation DTA Ingénierie/Projet magasin distribution/Sujet/données/MAGASINS.txt",
								"UTF-8", "\t", "\n", false, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							rowHelper_tFileInputDelimited_1.valueToConn(fid_tFileInputDelimited_1, row1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1" + iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								dim_magasin = null;

// # Output table : 'dim_magasin'
								dim_magasin_tmp.code_etablissement = row1.ZIM_ETABLISSEMENT;
								dim_magasin_tmp.adresse = row1.ZIM_ADRESSE1;
								dim_magasin_tmp.code_postal = row1.ZIM_CODEPOSTAL;
								dim_magasin_tmp.ville = row1.ZIM_VILLE;
								dim_magasin = dim_magasin_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "dim_magasin"
							if (dim_magasin != null) {

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								// dim_magasin
								// dim_magasin

								if (execStat) {
									runStat.updateStatOnConnection("dim_magasin" + iterateId, 1, 1);
								}

								row2 = null;
								whetherReject_tDBOutput_1 = false;
								if (dim_magasin.code_etablissement == null) {
									pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(1, dim_magasin.code_etablissement);
								}

								if (dim_magasin.adresse == null) {
									pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(2, dim_magasin.adresse);
								}

								if (dim_magasin.code_postal == null) {
									pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(3, dim_magasin.code_postal);
								}

								if (dim_magasin.ville == null) {
									pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(4, dim_magasin.ville);
								}

								pstmt_tDBOutput_1.addBatch();
								nb_line_tDBOutput_1++;

								batchSizeCounter_tDBOutput_1++;
								if (!whetherReject_tDBOutput_1) {
									row2 = new row2Struct();
									row2.code_etablissement = dim_magasin.code_etablissement;
									row2.adresse = dim_magasin.adresse;
									row2.code_postal = dim_magasin.code_postal;
									row2.ville = dim_magasin.ville;
								}
								if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
									try {
										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
													? 0
													: 1);
										}
										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}
										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
										System.err.println(e.getMessage());
									}

									batchSizeCounter_tDBOutput_1 = 0;
								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */
// Start of branch "row2"
								if (row2 != null) {

									/**
									 * [tLogRow_1 main ] start
									 */

									currentComponent = "tLogRow_1";

									// row2
									// row2

									if (execStat) {
										runStat.updateStatOnConnection("row2" + iterateId, 1, 1);
									}

///////////////////////		

									strBuffer_tLogRow_1 = new StringBuilder();

									if (row2.code_etablissement != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row2.code_etablissement));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row2.adresse != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row2.adresse));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row2.code_postal != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row2.code_postal));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row2.ville != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row2.ville));

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_1 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
									}
									consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
									consoleOut_tLogRow_1.flush();
									nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

									tos_count_tLogRow_1++;

									/**
									 * [tLogRow_1 main ] stop
									 */

									/**
									 * [tLogRow_1 process_data_begin ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_1 process_data_end ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_end ] stop
									 */

								} // End of branch "row2"

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

							} // End of branch "dim_magasin"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/deric/Documents/Formation DTA Ingénierie/Projet magasin distribution/Sujet/données/MAGASINS.txt") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("dim_magasin" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null || !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
			}

			tDBCommit_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					try {

						conn_tDBCommit_1.commit();

					} finally {

						conn_tDBCommit_1.close();

					}

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				/**
				 * [tDBCommit_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final DIM_Magasin DIM_MagasinClass = new DIM_Magasin();

		int exitCode = DIM_MagasinClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = DIM_Magasin.class.getClassLoader()
					.getResourceAsStream("grande_distribution/dim_magasin_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = DIM_Magasin.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBConnection_1) {
			globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

			e_tDBConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DIM_Magasin");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {// for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}

		if (!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 185433 characters generated by Talend Open Studio for Data Integration on the
 * April 9, 2020 at 5:54:14 PM CEST
 ************************************************************************************************/